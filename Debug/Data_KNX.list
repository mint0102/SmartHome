
Data_KNX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fb8  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a018  0800a018  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a018  0800a018  0001a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a020  0800a020  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a024  0800a024  0001a024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800a028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000003b0  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003cc  200003cc  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018c6a  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004084  00000000  00000000  00038cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001690  00000000  00000000  0003cd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001199  00000000  00000000  0003e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025f9d  00000000  00000000  0003f5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020e43  00000000  00000000  00065546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df353  00000000  00000000  00086389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005d00  00000000  00000000  001656dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0016b3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007048 	.word	0x08007048

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08007048 	.word	0x08007048

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b3d      	ldr	r3, [pc, #244]	; (80005cc <MX_ADC1_Init+0x108>)
 80004d8:	4a3d      	ldr	r2, [pc, #244]	; (80005d0 <MX_ADC1_Init+0x10c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004dc:	4b3b      	ldr	r3, [pc, #236]	; (80005cc <MX_ADC1_Init+0x108>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e2:	4b3a      	ldr	r3, [pc, #232]	; (80005cc <MX_ADC1_Init+0x108>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004e8:	4b38      	ldr	r3, [pc, #224]	; (80005cc <MX_ADC1_Init+0x108>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ee:	4b37      	ldr	r3, [pc, #220]	; (80005cc <MX_ADC1_Init+0x108>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f4:	4b35      	ldr	r3, [pc, #212]	; (80005cc <MX_ADC1_Init+0x108>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fc:	4b33      	ldr	r3, [pc, #204]	; (80005cc <MX_ADC1_Init+0x108>)
 80004fe:	2200      	movs	r2, #0
 8000500:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000502:	4b32      	ldr	r3, [pc, #200]	; (80005cc <MX_ADC1_Init+0x108>)
 8000504:	4a33      	ldr	r2, [pc, #204]	; (80005d4 <MX_ADC1_Init+0x110>)
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000508:	4b30      	ldr	r3, [pc, #192]	; (80005cc <MX_ADC1_Init+0x108>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800050e:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <MX_ADC1_Init+0x108>)
 8000510:	2205      	movs	r2, #5
 8000512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000514:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <MX_ADC1_Init+0x108>)
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051c:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <MX_ADC1_Init+0x108>)
 800051e:	2201      	movs	r2, #1
 8000520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000522:	482a      	ldr	r0, [pc, #168]	; (80005cc <MX_ADC1_Init+0x108>)
 8000524:	f001 ffe2 	bl	80024ec <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f001 f939 	bl	80017a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000532:	2308      	movs	r3, #8
 8000534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	4619      	mov	r1, r3
 8000542:	4822      	ldr	r0, [pc, #136]	; (80005cc <MX_ADC1_Init+0x108>)
 8000544:	f002 f816 	bl	8002574 <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054e:	f001 f929 	bl	80017a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000552:	2309      	movs	r3, #9
 8000554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000556:	2302      	movs	r3, #2
 8000558:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	481b      	ldr	r0, [pc, #108]	; (80005cc <MX_ADC1_Init+0x108>)
 8000560:	f002 f808 	bl	8002574 <HAL_ADC_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800056a:	f001 f91b 	bl	80017a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800056e:	230a      	movs	r3, #10
 8000570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000572:	2303      	movs	r3, #3
 8000574:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	4619      	mov	r1, r3
 800057a:	4814      	ldr	r0, [pc, #80]	; (80005cc <MX_ADC1_Init+0x108>)
 800057c:	f001 fffa 	bl	8002574 <HAL_ADC_ConfigChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000586:	f001 f90d 	bl	80017a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800058a:	230b      	movs	r3, #11
 800058c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800058e:	2304      	movs	r3, #4
 8000590:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	480d      	ldr	r0, [pc, #52]	; (80005cc <MX_ADC1_Init+0x108>)
 8000598:	f001 ffec 	bl	8002574 <HAL_ADC_ConfigChannel>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80005a2:	f001 f8ff 	bl	80017a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005a6:	230c      	movs	r3, #12
 80005a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80005aa:	2305      	movs	r3, #5
 80005ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <MX_ADC1_Init+0x108>)
 80005b4:	f001 ffde 	bl	8002574 <HAL_ADC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80005be:	f001 f8f1 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000038 	.word	0x20000038
 80005d0:	40012000 	.word	0x40012000
 80005d4:	0f000001 	.word	0x0f000001

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a3c      	ldr	r2, [pc, #240]	; (80006e8 <HAL_ADC_MspInit+0x110>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d171      	bne.n	80006de <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	4b3b      	ldr	r3, [pc, #236]	; (80006ec <HAL_ADC_MspInit+0x114>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000602:	4a3a      	ldr	r2, [pc, #232]	; (80006ec <HAL_ADC_MspInit+0x114>)
 8000604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000608:	6453      	str	r3, [r2, #68]	; 0x44
 800060a:	4b38      	ldr	r3, [pc, #224]	; (80006ec <HAL_ADC_MspInit+0x114>)
 800060c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b34      	ldr	r3, [pc, #208]	; (80006ec <HAL_ADC_MspInit+0x114>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a33      	ldr	r2, [pc, #204]	; (80006ec <HAL_ADC_MspInit+0x114>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b31      	ldr	r3, [pc, #196]	; (80006ec <HAL_ADC_MspInit+0x114>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <HAL_ADC_MspInit+0x114>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a2c      	ldr	r2, [pc, #176]	; (80006ec <HAL_ADC_MspInit+0x114>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <HAL_ADC_MspInit+0x114>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800064e:	2307      	movs	r3, #7
 8000650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000652:	2303      	movs	r3, #3
 8000654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	4823      	ldr	r0, [pc, #140]	; (80006f0 <HAL_ADC_MspInit+0x118>)
 8000662:	f002 fe33 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000666:	2303      	movs	r3, #3
 8000668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066a:	2303      	movs	r3, #3
 800066c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	481e      	ldr	r0, [pc, #120]	; (80006f4 <HAL_ADC_MspInit+0x11c>)
 800067a:	f002 fe27 	bl	80032cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800067e:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 8000680:	4a1e      	ldr	r2, [pc, #120]	; (80006fc <HAL_ADC_MspInit+0x124>)
 8000682:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 8000698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800069c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 80006a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 80006a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 80006b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 80006c4:	f002 fa86 	bl	8002bd4 <HAL_DMA_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80006ce:	f001 f869 	bl	80017a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 80006d6:	639a      	str	r2, [r3, #56]	; 0x38
 80006d8:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <HAL_ADC_MspInit+0x120>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006de:	bf00      	nop
 80006e0:	3728      	adds	r7, #40	; 0x28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40012000 	.word	0x40012000
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020400 	.word	0x40020400
 80006f8:	20000080 	.word	0x20000080
 80006fc:	40026410 	.word	0x40026410

08000700 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	2108      	movs	r1, #8
 8000708:	4802      	ldr	r0, [pc, #8]	; (8000714 <button_init+0x14>)
 800070a:	f002 ff7b 	bl	8003604 <HAL_GPIO_WritePin>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40020c00 	.word	0x40020c00

08000718 <button_Scan>:

void button_Scan(){
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2108      	movs	r1, #8
 8000722:	482f      	ldr	r0, [pc, #188]	; (80007e0 <button_Scan+0xc8>)
 8000724:	f002 ff6e 	bl	8003604 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	2108      	movs	r1, #8
 800072c:	482c      	ldr	r0, [pc, #176]	; (80007e0 <button_Scan+0xc8>)
 800072e:	f002 ff69 	bl	8003604 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000732:	230a      	movs	r3, #10
 8000734:	2202      	movs	r2, #2
 8000736:	492b      	ldr	r1, [pc, #172]	; (80007e4 <button_Scan+0xcc>)
 8000738:	482b      	ldr	r0, [pc, #172]	; (80007e8 <button_Scan+0xd0>)
 800073a:	f003 ff38 	bl	80045ae <HAL_SPI_Receive>
	  int button_index = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000746:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	e03f      	b.n	80007ce <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db06      	blt.n	8000762 <button_Scan+0x4a>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b03      	cmp	r3, #3
 8000758:	dc03      	bgt.n	8000762 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3304      	adds	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e018      	b.n	8000794 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b03      	cmp	r3, #3
 8000766:	dd07      	ble.n	8000778 <button_Scan+0x60>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b07      	cmp	r3, #7
 800076c:	dc04      	bgt.n	8000778 <button_Scan+0x60>
			  button_index = 7 - i;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f1c3 0307 	rsb	r3, r3, #7
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e00d      	b.n	8000794 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b07      	cmp	r3, #7
 800077c:	dd06      	ble.n	800078c <button_Scan+0x74>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b0b      	cmp	r3, #11
 8000782:	dc03      	bgt.n	800078c <button_Scan+0x74>
			  button_index = i + 4;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3304      	adds	r3, #4
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	e003      	b.n	8000794 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f1c3 0317 	rsb	r3, r3, #23
 8000792:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <button_Scan+0xcc>)
 8000796:	881a      	ldrh	r2, [r3, #0]
 8000798:	897b      	ldrh	r3, [r7, #10]
 800079a:	4013      	ands	r3, r2
 800079c:	b29b      	uxth	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d005      	beq.n	80007ae <button_Scan+0x96>
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <button_Scan+0xd4>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2100      	movs	r1, #0
 80007a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007ac:	e009      	b.n	80007c2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <button_Scan+0xd4>)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b6:	3301      	adds	r3, #1
 80007b8:	b299      	uxth	r1, r3
 80007ba:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <button_Scan+0xd4>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80007c2:	897b      	ldrh	r3, [r7, #10]
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3301      	adds	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	ddbc      	ble.n	800074e <button_Scan+0x36>
	  }
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40020c00 	.word	0x40020c00
 80007e4:	20000100 	.word	0x20000100
 80007e8:	200001c0 	.word	0x200001c0
 80007ec:	200000e0 	.word	0x200000e0

080007f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_DMA_Init+0x3c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <MX_DMA_Init+0x3c>)
 8000800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_DMA_Init+0x3c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2038      	movs	r0, #56	; 0x38
 8000818:	f002 f9a5 	bl	8002b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800081c:	2038      	movs	r0, #56	; 0x38
 800081e:	f002 f9be 	bl	8002b9e <HAL_NVIC_EnableIRQ>

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800085c:	4b2f      	ldr	r3, [pc, #188]	; (800091c <MX_FSMC_Init+0xec>)
 800085e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000862:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000864:	4b2d      	ldr	r3, [pc, #180]	; (800091c <MX_FSMC_Init+0xec>)
 8000866:	4a2e      	ldr	r2, [pc, #184]	; (8000920 <MX_FSMC_Init+0xf0>)
 8000868:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <MX_FSMC_Init+0xec>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000870:	4b2a      	ldr	r3, [pc, #168]	; (800091c <MX_FSMC_Init+0xec>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <MX_FSMC_Init+0xec>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <MX_FSMC_Init+0xec>)
 800087e:	2210      	movs	r2, #16
 8000880:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <MX_FSMC_Init+0xec>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <MX_FSMC_Init+0xec>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <MX_FSMC_Init+0xec>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <MX_FSMC_Init+0xec>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_FSMC_Init+0xec>)
 800089c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_FSMC_Init+0xec>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <MX_FSMC_Init+0xec>)
 80008aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_FSMC_Init+0xec>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_FSMC_Init+0xec>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_FSMC_Init+0xec>)
 80008be:	2200      	movs	r2, #0
 80008c0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80008c2:	230f      	movs	r3, #15
 80008c4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80008c6:	230f      	movs	r3, #15
 80008c8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80008ca:	233c      	movs	r3, #60	; 0x3c
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80008d2:	2310      	movs	r3, #16
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80008d6:	2311      	movs	r3, #17
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80008da:	2300      	movs	r3, #0
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80008de:	2308      	movs	r3, #8
 80008e0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80008e2:	230f      	movs	r3, #15
 80008e4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80008e6:	2309      	movs	r3, #9
 80008e8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008ee:	2310      	movs	r3, #16
 80008f0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008f2:	2311      	movs	r3, #17
 80008f4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008fa:	463a      	mov	r2, r7
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <MX_FSMC_Init+0xec>)
 8000904:	f004 fa36 	bl	8004d74 <HAL_SRAM_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800090e:	f000 ff49 	bl	80017a4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000912:	bf00      	nop
 8000914:	3738      	adds	r7, #56	; 0x38
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000104 	.word	0x20000104
 8000920:	a0000104 	.word	0xa0000104

08000924 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_FSMC_MspInit+0x88>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d131      	bne.n	80009a4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <HAL_FSMC_MspInit+0x88>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_FSMC_MspInit+0x8c>)
 800094c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800094e:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <HAL_FSMC_MspInit+0x8c>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6393      	str	r3, [r2, #56]	; 0x38
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_FSMC_MspInit+0x8c>)
 8000958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000962:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000966:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000974:	230c      	movs	r3, #12
 8000976:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	4619      	mov	r1, r3
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <HAL_FSMC_MspInit+0x90>)
 800097e:	f002 fca5 	bl	80032cc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000982:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000986:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000994:	230c      	movs	r3, #12
 8000996:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4619      	mov	r1, r3
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <HAL_FSMC_MspInit+0x94>)
 800099e:	f002 fc95 	bl	80032cc <HAL_GPIO_Init>
 80009a2:	e000      	b.n	80009a6 <HAL_FSMC_MspInit+0x82>
    return;
 80009a4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000154 	.word	0x20000154
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40020c00 	.word	0x40020c00

080009bc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80009c4:	f7ff ffae 	bl	8000924 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08e      	sub	sp, #56	; 0x38
 80009d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
 80009ea:	4b8f      	ldr	r3, [pc, #572]	; (8000c28 <MX_GPIO_Init+0x258>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a8e      	ldr	r2, [pc, #568]	; (8000c28 <MX_GPIO_Init+0x258>)
 80009f0:	f043 0310 	orr.w	r3, r3, #16
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b8c      	ldr	r3, [pc, #560]	; (8000c28 <MX_GPIO_Init+0x258>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0310 	and.w	r3, r3, #16
 80009fe:	623b      	str	r3, [r7, #32]
 8000a00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
 8000a06:	4b88      	ldr	r3, [pc, #544]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a87      	ldr	r2, [pc, #540]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b85      	ldr	r3, [pc, #532]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	61fb      	str	r3, [r7, #28]
 8000a1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	4b81      	ldr	r3, [pc, #516]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a80      	ldr	r2, [pc, #512]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a28:	f043 0320 	orr.w	r3, r3, #32
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b7e      	ldr	r3, [pc, #504]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0320 	and.w	r3, r3, #32
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	4b7a      	ldr	r3, [pc, #488]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a79      	ldr	r2, [pc, #484]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b77      	ldr	r3, [pc, #476]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b73      	ldr	r3, [pc, #460]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a72      	ldr	r2, [pc, #456]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b70      	ldr	r3, [pc, #448]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b6c      	ldr	r3, [pc, #432]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a6b      	ldr	r2, [pc, #428]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b69      	ldr	r3, [pc, #420]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b65      	ldr	r3, [pc, #404]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a64      	ldr	r2, [pc, #400]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b62      	ldr	r3, [pc, #392]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b5e      	ldr	r3, [pc, #376]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a5d      	ldr	r2, [pc, #372]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b5b      	ldr	r3, [pc, #364]	; (8000c28 <MX_GPIO_Init+0x258>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2170      	movs	r1, #112	; 0x70
 8000aca:	4858      	ldr	r0, [pc, #352]	; (8000c2c <MX_GPIO_Init+0x25c>)
 8000acc:	f002 fd9a 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000ad6:	4856      	ldr	r0, [pc, #344]	; (8000c30 <MX_GPIO_Init+0x260>)
 8000ad8:	f002 fd94 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae2:	4854      	ldr	r0, [pc, #336]	; (8000c34 <MX_GPIO_Init+0x264>)
 8000ae4:	f002 fd8e 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000aee:	4852      	ldr	r0, [pc, #328]	; (8000c38 <MX_GPIO_Init+0x268>)
 8000af0:	f002 fd88 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSMC_BLK_Pin|RS485_EN_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000afa:	4850      	ldr	r0, [pc, #320]	; (8000c3c <MX_GPIO_Init+0x26c>)
 8000afc:	f002 fd82 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2108      	movs	r1, #8
 8000b04:	484e      	ldr	r0, [pc, #312]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000b06:	f002 fd7d 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000b0a:	2370      	movs	r3, #112	; 0x70
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4842      	ldr	r0, [pc, #264]	; (8000c2c <MX_GPIO_Init+0x25c>)
 8000b22:	f002 fbd3 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000b26:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	483c      	ldr	r0, [pc, #240]	; (8000c30 <MX_GPIO_Init+0x260>)
 8000b40:	f002 fbc4 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	4836      	ldr	r0, [pc, #216]	; (8000c34 <MX_GPIO_Init+0x264>)
 8000b5a:	f002 fbb7 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	482f      	ldr	r0, [pc, #188]	; (8000c34 <MX_GPIO_Init+0x264>)
 8000b78:	f002 fba8 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000b7c:	23c0      	movs	r3, #192	; 0xc0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	482b      	ldr	r0, [pc, #172]	; (8000c3c <MX_GPIO_Init+0x26c>)
 8000b90:	f002 fb9c 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000b94:	2330      	movs	r3, #48	; 0x30
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4822      	ldr	r0, [pc, #136]	; (8000c30 <MX_GPIO_Init+0x260>)
 8000ba8:	f002 fb90 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000bac:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481c      	ldr	r0, [pc, #112]	; (8000c38 <MX_GPIO_Init+0x268>)
 8000bc6:	f002 fb81 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000bca:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4814      	ldr	r0, [pc, #80]	; (8000c30 <MX_GPIO_Init+0x260>)
 8000be0:	f002 fb74 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin|RS485_EN_Pin;
 8000be4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480f      	ldr	r0, [pc, #60]	; (8000c3c <MX_GPIO_Init+0x26c>)
 8000bfe:	f002 fb65 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000c02:	2308      	movs	r3, #8
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <MX_GPIO_Init+0x270>)
 8000c1a:	f002 fb57 	bl	80032cc <HAL_GPIO_Init>

}
 8000c1e:	bf00      	nop
 8000c20:	3738      	adds	r7, #56	; 0x38
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40021400 	.word	0x40021400
 8000c38:	40021800 	.word	0x40021800
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40020c00 	.word	0x40020c00

08000c44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_I2C1_Init+0x50>)
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <MX_I2C1_Init+0x54>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_I2C1_Init+0x50>)
 8000c50:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <MX_I2C1_Init+0x58>)
 8000c52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_I2C1_Init+0x50>)
 8000c62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_I2C1_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_I2C1_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_I2C1_Init+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_I2C1_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_I2C1_Init+0x50>)
 8000c82:	f002 fcf3 	bl	800366c <HAL_I2C_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c8c:	f000 fd8a 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000158 	.word	0x20000158
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	000186a0 	.word	0x000186a0

08000ca0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <HAL_I2C_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12b      	bne.n	8000d1a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cde:	23c0      	movs	r3, #192	; 0xc0
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce2:	2312      	movs	r3, #18
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <HAL_I2C_MspInit+0x8c>)
 8000cfa:	f002 fae7 	bl	80032cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_I2C_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40005400 	.word	0x40005400
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020400 	.word	0x40020400

08000d30 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <LCD_WR_REG+0x1c>)
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	8013      	strh	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	600ffffe 	.word	0x600ffffe

08000d50 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <LCD_WR_DATA+0x1c>)
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	8053      	strh	r3, [r2, #2]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	600ffffe 	.word	0x600ffffe

08000d70 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <LCD_RD_DATA+0x20>)
 8000d78:	885b      	ldrh	r3, [r3, #2]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	b29b      	uxth	r3, r3
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	600ffffe 	.word	0x600ffffe

08000d94 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	4611      	mov	r1, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	4623      	mov	r3, r4
 8000da4:	80fb      	strh	r3, [r7, #6]
 8000da6:	4603      	mov	r3, r0
 8000da8:	80bb      	strh	r3, [r7, #4]
 8000daa:	460b      	mov	r3, r1
 8000dac:	807b      	strh	r3, [r7, #2]
 8000dae:	4613      	mov	r3, r2
 8000db0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000db2:	202a      	movs	r0, #42	; 0x2a
 8000db4:	f7ff ffbc 	bl	8000d30 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ffc6 	bl	8000d50 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ffc0 	bl	8000d50 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000dd0:	887b      	ldrh	r3, [r7, #2]
 8000dd2:	0a1b      	lsrs	r3, r3, #8
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ffba 	bl	8000d50 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ffb4 	bl	8000d50 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000de8:	202b      	movs	r0, #43	; 0x2b
 8000dea:	f7ff ffa1 	bl	8000d30 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000dee:	88bb      	ldrh	r3, [r7, #4]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ffab 	bl	8000d50 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffa5 	bl	8000d50 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000e06:	883b      	ldrh	r3, [r7, #0]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff9f 	bl	8000d50 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000e12:	883b      	ldrh	r3, [r7, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff99 	bl	8000d50 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000e1e:	202c      	movs	r0, #44	; 0x2c
 8000e20:	f7ff ff86 	bl	8000d30 <LCD_WR_REG>
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}

08000e2c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <lcd_Clear+0x60>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <lcd_Clear+0x60>)
 8000e40:	885b      	ldrh	r3, [r3, #2]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff ffa3 	bl	8000d94 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	81fb      	strh	r3, [r7, #14]
 8000e52:	e011      	b.n	8000e78 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	81bb      	strh	r3, [r7, #12]
 8000e58:	e006      	b.n	8000e68 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff77 	bl	8000d50 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000e62:	89bb      	ldrh	r3, [r7, #12]
 8000e64:	3301      	adds	r3, #1
 8000e66:	81bb      	strh	r3, [r7, #12]
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <lcd_Clear+0x60>)
 8000e6a:	885b      	ldrh	r3, [r3, #2]
 8000e6c:	89ba      	ldrh	r2, [r7, #12]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d3f3      	bcc.n	8000e5a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000e72:	89fb      	ldrh	r3, [r7, #14]
 8000e74:	3301      	adds	r3, #1
 8000e76:	81fb      	strh	r3, [r7, #14]
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <lcd_Clear+0x60>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	89fa      	ldrh	r2, [r7, #14]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d3e8      	bcc.n	8000e54 <lcd_Clear+0x28>
		}
	}
}
 8000e82:	bf00      	nop
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200001ac 	.word	0x200001ac

08000e90 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	88fa      	ldrh	r2, [r7, #6]
 8000ea6:	88b9      	ldrh	r1, [r7, #4]
 8000ea8:	88f8      	ldrh	r0, [r7, #6]
 8000eaa:	f7ff ff73 	bl	8000d94 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff4d 	bl	8000d50 <LCD_WR_DATA>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	4611      	mov	r1, r2
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4623      	mov	r3, r4
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80bb      	strh	r3, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	70fb      	strb	r3, [r7, #3]
 8000eda:	4613      	mov	r3, r2
 8000edc:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000ee6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eea:	085b      	lsrs	r3, r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf14      	ite	ne
 8000f02:	2301      	movne	r3, #1
 8000f04:	2300      	moveq	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4413      	add	r3, r2
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	fb12 f303 	smulbb	r3, r2, r3
 8000f16:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	3b20      	subs	r3, #32
 8000f1c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	4413      	add	r3, r2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	b29c      	uxth	r4, r3
 8000f2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	88b9      	ldrh	r1, [r7, #4]
 8000f3e:	88f8      	ldrh	r0, [r7, #6]
 8000f40:	4622      	mov	r2, r4
 8000f42:	f7ff ff27 	bl	8000d94 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	827b      	strh	r3, [r7, #18]
 8000f4a:	e07a      	b.n	8001042 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000f4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f50:	2b0c      	cmp	r3, #12
 8000f52:	d028      	beq.n	8000fa6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000f54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f58:	2b10      	cmp	r3, #16
 8000f5a:	d108      	bne.n	8000f6e <lcd_ShowChar+0xae>
 8000f5c:	78fa      	ldrb	r2, [r7, #3]
 8000f5e:	8a7b      	ldrh	r3, [r7, #18]
 8000f60:	493c      	ldr	r1, [pc, #240]	; (8001054 <lcd_ShowChar+0x194>)
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	440a      	add	r2, r1
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	75fb      	strb	r3, [r7, #23]
 8000f6c:	e01b      	b.n	8000fa6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000f6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f72:	2b18      	cmp	r3, #24
 8000f74:	d10b      	bne.n	8000f8e <lcd_ShowChar+0xce>
 8000f76:	78fa      	ldrb	r2, [r7, #3]
 8000f78:	8a79      	ldrh	r1, [r7, #18]
 8000f7a:	4837      	ldr	r0, [pc, #220]	; (8001058 <lcd_ShowChar+0x198>)
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	4403      	add	r3, r0
 8000f86:	440b      	add	r3, r1
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	75fb      	strb	r3, [r7, #23]
 8000f8c:	e00b      	b.n	8000fa6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000f8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f92:	2b20      	cmp	r3, #32
 8000f94:	d15a      	bne.n	800104c <lcd_ShowChar+0x18c>
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	8a7b      	ldrh	r3, [r7, #18]
 8000f9a:	4930      	ldr	r1, [pc, #192]	; (800105c <lcd_ShowChar+0x19c>)
 8000f9c:	0192      	lsls	r2, r2, #6
 8000f9e:	440a      	add	r2, r1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75bb      	strb	r3, [r7, #22]
 8000faa:	e044      	b.n	8001036 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000fac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d120      	bne.n	8000ff6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000fb4:	7dfa      	ldrb	r2, [r7, #23]
 8000fb6:	7dbb      	ldrb	r3, [r7, #22]
 8000fb8:	fa42 f303 	asr.w	r3, r2, r3
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <lcd_ShowChar+0x10e>
 8000fc4:	883b      	ldrh	r3, [r7, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fec2 	bl	8000d50 <LCD_WR_DATA>
 8000fcc:	e003      	b.n	8000fd6 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000fce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff febd 	bl	8000d50 <LCD_WR_DATA>
				m++;
 8000fd6:	7d7b      	ldrb	r3, [r7, #21]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000fdc:	7d7b      	ldrb	r3, [r7, #21]
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fe4:	fb01 f202 	mul.w	r2, r1, r2
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d11f      	bne.n	8001030 <lcd_ShowChar+0x170>
				{
					m=0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	757b      	strb	r3, [r7, #21]
					break;
 8000ff4:	e022      	b.n	800103c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000ff6:	7dfa      	ldrb	r2, [r7, #23]
 8000ff8:	7dbb      	ldrb	r3, [r7, #22]
 8000ffa:	fa42 f303 	asr.w	r3, r2, r3
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <lcd_ShowChar+0x152>
 8001006:	883a      	ldrh	r2, [r7, #0]
 8001008:	88b9      	ldrh	r1, [r7, #4]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff3f 	bl	8000e90 <lcd_DrawPoint>
				x++;
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	3301      	adds	r3, #1
 8001016:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	8a3b      	ldrh	r3, [r7, #16]
 800101c:	1ad2      	subs	r2, r2, r3
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	429a      	cmp	r2, r3
 8001022:	d105      	bne.n	8001030 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001024:	8a3b      	ldrh	r3, [r7, #16]
 8001026:	80fb      	strh	r3, [r7, #6]
					y++;
 8001028:	88bb      	ldrh	r3, [r7, #4]
 800102a:	3301      	adds	r3, #1
 800102c:	80bb      	strh	r3, [r7, #4]
					break;
 800102e:	e005      	b.n	800103c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001030:	7dbb      	ldrb	r3, [r7, #22]
 8001032:	3301      	adds	r3, #1
 8001034:	75bb      	strb	r3, [r7, #22]
 8001036:	7dbb      	ldrb	r3, [r7, #22]
 8001038:	2b07      	cmp	r3, #7
 800103a:	d9b7      	bls.n	8000fac <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 800103c:	8a7b      	ldrh	r3, [r7, #18]
 800103e:	3301      	adds	r3, #1
 8001040:	827b      	strh	r3, [r7, #18]
 8001042:	8a7a      	ldrh	r2, [r7, #18]
 8001044:	89bb      	ldrh	r3, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d380      	bcc.n	8000f4c <lcd_ShowChar+0x8c>
 800104a:	e000      	b.n	800104e <lcd_ShowChar+0x18e>
		else return;
 800104c:	bf00      	nop
				}
			}
		}
	}
}
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	08007078 	.word	0x08007078
 8001058:	08007668 	.word	0x08007668
 800105c:	08008838 	.word	0x08008838

08001060 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <lcd_SetDir+0x44>)
 800107c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001080:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <lcd_SetDir+0x44>)
 8001084:	22f0      	movs	r2, #240	; 0xf0
 8001086:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001088:	e006      	b.n	8001098 <lcd_SetDir+0x38>
		lcddev.width=240;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <lcd_SetDir+0x44>)
 800108c:	22f0      	movs	r2, #240	; 0xf0
 800108e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <lcd_SetDir+0x44>)
 8001092:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001096:	805a      	strh	r2, [r3, #2]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	200001ac 	.word	0x200001ac

080010a8 <lcd_init>:


void lcd_init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b2:	48aa      	ldr	r0, [pc, #680]	; (800135c <lcd_init+0x2b4>)
 80010b4:	f002 faa6 	bl	8003604 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010bc:	f001 f9f2 	bl	80024a4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c6:	48a5      	ldr	r0, [pc, #660]	; (800135c <lcd_init+0x2b4>)
 80010c8:	f002 fa9c 	bl	8003604 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d0:	f001 f9e8 	bl	80024a4 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff ffc3 	bl	8001060 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80010da:	20d3      	movs	r0, #211	; 0xd3
 80010dc:	f7ff fe28 	bl	8000d30 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80010e0:	f7ff fe46 	bl	8000d70 <LCD_RD_DATA>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b9d      	ldr	r3, [pc, #628]	; (8001360 <lcd_init+0x2b8>)
 80010ea:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010ec:	f7ff fe40 	bl	8000d70 <LCD_RD_DATA>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b9a      	ldr	r3, [pc, #616]	; (8001360 <lcd_init+0x2b8>)
 80010f6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010f8:	f7ff fe3a 	bl	8000d70 <LCD_RD_DATA>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b97      	ldr	r3, [pc, #604]	; (8001360 <lcd_init+0x2b8>)
 8001102:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001104:	4b96      	ldr	r3, [pc, #600]	; (8001360 <lcd_init+0x2b8>)
 8001106:	889b      	ldrh	r3, [r3, #4]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b94      	ldr	r3, [pc, #592]	; (8001360 <lcd_init+0x2b8>)
 800110e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001110:	f7ff fe2e 	bl	8000d70 <LCD_RD_DATA>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b91      	ldr	r3, [pc, #580]	; (8001360 <lcd_init+0x2b8>)
 800111a:	889b      	ldrh	r3, [r3, #4]
 800111c:	4313      	orrs	r3, r2
 800111e:	b29a      	uxth	r2, r3
 8001120:	4b8f      	ldr	r3, [pc, #572]	; (8001360 <lcd_init+0x2b8>)
 8001122:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001124:	20cf      	movs	r0, #207	; 0xcf
 8001126:	f7ff fe03 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fe10 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001130:	20c1      	movs	r0, #193	; 0xc1
 8001132:	f7ff fe0d 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001136:	2030      	movs	r0, #48	; 0x30
 8001138:	f7ff fe0a 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800113c:	20ed      	movs	r0, #237	; 0xed
 800113e:	f7ff fdf7 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001142:	2064      	movs	r0, #100	; 0x64
 8001144:	f7ff fe04 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001148:	2003      	movs	r0, #3
 800114a:	f7ff fe01 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800114e:	2012      	movs	r0, #18
 8001150:	f7ff fdfe 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001154:	2081      	movs	r0, #129	; 0x81
 8001156:	f7ff fdfb 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800115a:	20e8      	movs	r0, #232	; 0xe8
 800115c:	f7ff fde8 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001160:	2085      	movs	r0, #133	; 0x85
 8001162:	f7ff fdf5 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001166:	2010      	movs	r0, #16
 8001168:	f7ff fdf2 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800116c:	207a      	movs	r0, #122	; 0x7a
 800116e:	f7ff fdef 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001172:	20cb      	movs	r0, #203	; 0xcb
 8001174:	f7ff fddc 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001178:	2039      	movs	r0, #57	; 0x39
 800117a:	f7ff fde9 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800117e:	202c      	movs	r0, #44	; 0x2c
 8001180:	f7ff fde6 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff fde3 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800118a:	2034      	movs	r0, #52	; 0x34
 800118c:	f7ff fde0 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001190:	2002      	movs	r0, #2
 8001192:	f7ff fddd 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001196:	20f7      	movs	r0, #247	; 0xf7
 8001198:	f7ff fdca 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800119c:	2020      	movs	r0, #32
 800119e:	f7ff fdd7 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80011a2:	20ea      	movs	r0, #234	; 0xea
 80011a4:	f7ff fdc4 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fdd1 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fdce 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80011b4:	20c0      	movs	r0, #192	; 0xc0
 80011b6:	f7ff fdbb 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80011ba:	201b      	movs	r0, #27
 80011bc:	f7ff fdc8 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80011c0:	20c1      	movs	r0, #193	; 0xc1
 80011c2:	f7ff fdb5 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff fdc2 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80011cc:	20c5      	movs	r0, #197	; 0xc5
 80011ce:	f7ff fdaf 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80011d2:	2030      	movs	r0, #48	; 0x30
 80011d4:	f7ff fdbc 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80011d8:	2030      	movs	r0, #48	; 0x30
 80011da:	f7ff fdb9 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011de:	20c7      	movs	r0, #199	; 0xc7
 80011e0:	f7ff fda6 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011e4:	20b7      	movs	r0, #183	; 0xb7
 80011e6:	f7ff fdb3 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011ea:	2036      	movs	r0, #54	; 0x36
 80011ec:	f7ff fda0 	bl	8000d30 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80011f0:	2008      	movs	r0, #8
 80011f2:	f7ff fdad 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80011f6:	203a      	movs	r0, #58	; 0x3a
 80011f8:	f7ff fd9a 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80011fc:	2055      	movs	r0, #85	; 0x55
 80011fe:	f7ff fda7 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001202:	20b1      	movs	r0, #177	; 0xb1
 8001204:	f7ff fd94 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fda1 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800120e:	201a      	movs	r0, #26
 8001210:	f7ff fd9e 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001214:	20b6      	movs	r0, #182	; 0xb6
 8001216:	f7ff fd8b 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800121a:	200a      	movs	r0, #10
 800121c:	f7ff fd98 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001220:	20a2      	movs	r0, #162	; 0xa2
 8001222:	f7ff fd95 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001226:	20f2      	movs	r0, #242	; 0xf2
 8001228:	f7ff fd82 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fd8f 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001232:	2026      	movs	r0, #38	; 0x26
 8001234:	f7ff fd7c 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff fd89 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800123e:	20e0      	movs	r0, #224	; 0xe0
 8001240:	f7ff fd76 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001244:	200f      	movs	r0, #15
 8001246:	f7ff fd83 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800124a:	202a      	movs	r0, #42	; 0x2a
 800124c:	f7ff fd80 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001250:	2028      	movs	r0, #40	; 0x28
 8001252:	f7ff fd7d 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001256:	2008      	movs	r0, #8
 8001258:	f7ff fd7a 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800125c:	200e      	movs	r0, #14
 800125e:	f7ff fd77 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001262:	2008      	movs	r0, #8
 8001264:	f7ff fd74 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001268:	2054      	movs	r0, #84	; 0x54
 800126a:	f7ff fd71 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800126e:	20a9      	movs	r0, #169	; 0xa9
 8001270:	f7ff fd6e 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001274:	2043      	movs	r0, #67	; 0x43
 8001276:	f7ff fd6b 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800127a:	200a      	movs	r0, #10
 800127c:	f7ff fd68 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001280:	200f      	movs	r0, #15
 8001282:	f7ff fd65 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fd62 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fd5f 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fd5c 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fd59 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800129e:	20e1      	movs	r0, #225	; 0xe1
 80012a0:	f7ff fd46 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fd53 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80012aa:	2015      	movs	r0, #21
 80012ac:	f7ff fd50 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80012b0:	2017      	movs	r0, #23
 80012b2:	f7ff fd4d 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80012b6:	2007      	movs	r0, #7
 80012b8:	f7ff fd4a 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80012bc:	2011      	movs	r0, #17
 80012be:	f7ff fd47 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80012c2:	2006      	movs	r0, #6
 80012c4:	f7ff fd44 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80012c8:	202b      	movs	r0, #43	; 0x2b
 80012ca:	f7ff fd41 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80012ce:	2056      	movs	r0, #86	; 0x56
 80012d0:	f7ff fd3e 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80012d4:	203c      	movs	r0, #60	; 0x3c
 80012d6:	f7ff fd3b 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80012da:	2005      	movs	r0, #5
 80012dc:	f7ff fd38 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012e0:	2010      	movs	r0, #16
 80012e2:	f7ff fd35 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012e6:	200f      	movs	r0, #15
 80012e8:	f7ff fd32 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012ec:	203f      	movs	r0, #63	; 0x3f
 80012ee:	f7ff fd2f 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012f2:	203f      	movs	r0, #63	; 0x3f
 80012f4:	f7ff fd2c 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012f8:	200f      	movs	r0, #15
 80012fa:	f7ff fd29 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80012fe:	202b      	movs	r0, #43	; 0x2b
 8001300:	f7ff fd16 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fd23 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fd20 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff fd1d 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001316:	203f      	movs	r0, #63	; 0x3f
 8001318:	f7ff fd1a 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800131c:	202a      	movs	r0, #42	; 0x2a
 800131e:	f7ff fd07 	bl	8000d30 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fd14 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fd11 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fd0e 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001334:	20ef      	movs	r0, #239	; 0xef
 8001336:	f7ff fd0b 	bl	8000d50 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800133a:	2011      	movs	r0, #17
 800133c:	f7ff fcf8 	bl	8000d30 <LCD_WR_REG>
	HAL_Delay(120);
 8001340:	2078      	movs	r0, #120	; 0x78
 8001342:	f001 f8af 	bl	80024a4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001346:	2029      	movs	r0, #41	; 0x29
 8001348:	f7ff fcf2 	bl	8000d30 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <lcd_init+0x2bc>)
 8001354:	f002 f956 	bl	8003604 <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40020800 	.word	0x40020800
 8001360:	200001ac 	.word	0x200001ac
 8001364:	40020000 	.word	0x40020000

08001368 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b08b      	sub	sp, #44	; 0x2c
 800136c:	af04      	add	r7, sp, #16
 800136e:	60ba      	str	r2, [r7, #8]
 8001370:	461a      	mov	r2, r3
 8001372:	4603      	mov	r3, r0
 8001374:	81fb      	strh	r3, [r7, #14]
 8001376:	460b      	mov	r3, r1
 8001378:	81bb      	strh	r3, [r7, #12]
 800137a:	4613      	mov	r3, r2
 800137c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800137e:	89fb      	ldrh	r3, [r7, #14]
 8001380:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001382:	2300      	movs	r3, #0
 8001384:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001386:	e048      	b.n	800141a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d145      	bne.n	800141a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800138e:	89fa      	ldrh	r2, [r7, #14]
 8001390:	4b26      	ldr	r3, [pc, #152]	; (800142c <lcd_ShowStr+0xc4>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800139a:	085b      	lsrs	r3, r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	1acb      	subs	r3, r1, r3
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dc3f      	bgt.n	8001424 <lcd_ShowStr+0xbc>
 80013a4:	89ba      	ldrh	r2, [r7, #12]
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <lcd_ShowStr+0xc4>)
 80013a8:	885b      	ldrh	r3, [r3, #2]
 80013aa:	4619      	mov	r1, r3
 80013ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013b0:	1acb      	subs	r3, r1, r3
 80013b2:	429a      	cmp	r2, r3
 80013b4:	dc36      	bgt.n	8001424 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b80      	cmp	r3, #128	; 0x80
 80013bc:	d902      	bls.n	80013c4 <lcd_ShowStr+0x5c>
 80013be:	2301      	movs	r3, #1
 80013c0:	75fb      	strb	r3, [r7, #23]
 80013c2:	e02a      	b.n	800141a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b0d      	cmp	r3, #13
 80013ca:	d10b      	bne.n	80013e4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80013cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	89bb      	ldrh	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80013d8:	8abb      	ldrh	r3, [r7, #20]
 80013da:	81fb      	strh	r3, [r7, #14]
					str++;
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	3301      	adds	r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	e017      	b.n	8001414 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	88fc      	ldrh	r4, [r7, #6]
 80013ea:	89b9      	ldrh	r1, [r7, #12]
 80013ec:	89f8      	ldrh	r0, [r7, #14]
 80013ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	4623      	mov	r3, r4
 8001400:	f7ff fd5e 	bl	8000ec0 <lcd_ShowChar>
					x+=sizey/2;
 8001404:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	b29a      	uxth	r2, r3
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	4413      	add	r3, r2
 8001412:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3301      	adds	r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1b2      	bne.n	8001388 <lcd_ShowStr+0x20>
 8001422:	e000      	b.n	8001426 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001424:	bf00      	nop
			}
		}
	}
}
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd90      	pop	{r4, r7, pc}
 800142c:	200001ac 	.word	0x200001ac

08001430 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001434:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <led7_Scan+0x104>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	b29a      	uxth	r2, r3
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <led7_Scan+0x104>)
 800143e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001440:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <led7_Scan+0x108>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a3d      	ldr	r2, [pc, #244]	; (800153c <led7_Scan+0x10c>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21a      	sxth	r2, r3
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <led7_Scan+0x104>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	b21b      	sxth	r3, r3
 8001452:	4313      	orrs	r3, r2
 8001454:	b21b      	sxth	r3, r3
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <led7_Scan+0x104>)
 800145a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800145c:	4b36      	ldr	r3, [pc, #216]	; (8001538 <led7_Scan+0x108>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d847      	bhi.n	80014f4 <led7_Scan+0xc4>
 8001464:	a201      	add	r2, pc, #4	; (adr r2, 800146c <led7_Scan+0x3c>)
 8001466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146a:	bf00      	nop
 800146c:	0800147d 	.word	0x0800147d
 8001470:	0800149b 	.word	0x0800149b
 8001474:	080014b9 	.word	0x080014b9
 8001478:	080014d7 	.word	0x080014d7
	case 0:
		spi_buffer |= 0x00b0;
 800147c:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <led7_Scan+0x104>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001484:	b29a      	uxth	r2, r3
 8001486:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <led7_Scan+0x104>)
 8001488:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <led7_Scan+0x104>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <led7_Scan+0x104>)
 8001496:	801a      	strh	r2, [r3, #0]
		break;
 8001498:	e02d      	b.n	80014f6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <led7_Scan+0x104>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	4b23      	ldr	r3, [pc, #140]	; (8001534 <led7_Scan+0x104>)
 80014a6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <led7_Scan+0x104>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	f023 0320 	bic.w	r3, r3, #32
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <led7_Scan+0x104>)
 80014b4:	801a      	strh	r2, [r3, #0]
		break;
 80014b6:	e01e      	b.n	80014f6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <led7_Scan+0x104>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <led7_Scan+0x104>)
 80014c4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <led7_Scan+0x104>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	f023 0310 	bic.w	r3, r3, #16
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <led7_Scan+0x104>)
 80014d2:	801a      	strh	r2, [r3, #0]
		break;
 80014d4:	e00f      	b.n	80014f6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <led7_Scan+0x104>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <led7_Scan+0x104>)
 80014e2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <led7_Scan+0x104>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <led7_Scan+0x104>)
 80014f0:	801a      	strh	r2, [r3, #0]
		break;
 80014f2:	e000      	b.n	80014f6 <led7_Scan+0xc6>
	default:
		break;
 80014f4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <led7_Scan+0x108>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	425a      	negs	r2, r3
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	f002 0203 	and.w	r2, r2, #3
 8001506:	bf58      	it	pl
 8001508:	4253      	negpl	r3, r2
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <led7_Scan+0x108>)
 800150c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2140      	movs	r1, #64	; 0x40
 8001512:	480b      	ldr	r0, [pc, #44]	; (8001540 <led7_Scan+0x110>)
 8001514:	f002 f876 	bl	8003604 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001518:	2301      	movs	r3, #1
 800151a:	2202      	movs	r2, #2
 800151c:	4905      	ldr	r1, [pc, #20]	; (8001534 <led7_Scan+0x104>)
 800151e:	4809      	ldr	r0, [pc, #36]	; (8001544 <led7_Scan+0x114>)
 8001520:	f002 ff09 	bl	8004336 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001524:	2201      	movs	r2, #1
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <led7_Scan+0x110>)
 800152a:	f002 f86b 	bl	8003604 <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000004 	.word	0x20000004
 8001538:	200001b4 	.word	0x200001b4
 800153c:	20000000 	.word	0x20000000
 8001540:	40021800 	.word	0x40021800
 8001544:	200001c0 	.word	0x200001c0

08001548 <lightProcess>:
 */
#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <lightProcess+0x58>)
 800154e:	8b5b      	ldrh	r3, [r3, #26]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d113      	bne.n	800157c <lightProcess+0x34>
		light_status = 1 - light_status;
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <lightProcess+0x5c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	f1c3 0301 	rsb	r3, r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <lightProcess+0x5c>)
 8001560:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <lightProcess+0x5c>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d104      	bne.n	8001574 <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 800156a:	2101      	movs	r1, #1
 800156c:	480e      	ldr	r0, [pc, #56]	; (80015a8 <lightProcess+0x60>)
 800156e:	f000 fc29 	bl	8001dc4 <uart_EspSendBytes>
 8001572:	e003      	b.n	800157c <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 8001574:	2101      	movs	r1, #1
 8001576:	480d      	ldr	r0, [pc, #52]	; (80015ac <lightProcess+0x64>)
 8001578:	f000 fc24 	bl	8001dc4 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <lightProcess+0x5c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8001584:	2201      	movs	r2, #1
 8001586:	2120      	movs	r1, #32
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <lightProcess+0x68>)
 800158a:	f002 f83b 	bl	8003604 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 800158e:	e004      	b.n	800159a <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2120      	movs	r1, #32
 8001594:	4806      	ldr	r0, [pc, #24]	; (80015b0 <lightProcess+0x68>)
 8001596:	f002 f835 	bl	8003604 <HAL_GPIO_WritePin>
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200000e0 	.word	0x200000e0
 80015a4:	200001b8 	.word	0x200001b8
 80015a8:	08007060 	.word	0x08007060
 80015ac:	08007064 	.word	0x08007064
 80015b0:	40021000 	.word	0x40021000

080015b4 <test_Esp>:

void test_Esp(){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0) uart_EspSendBytes("o", 1);
 80015ba:	f000 fd7d 	bl	80020b8 <uart_EspCheck>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d104      	bne.n	80015ce <test_Esp+0x1a>
 80015c4:	2101      	movs	r1, #1
 80015c6:	480a      	ldr	r0, [pc, #40]	; (80015f0 <test_Esp+0x3c>)
 80015c8:	f000 fbfc 	bl	8001dc4 <uart_EspSendBytes>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 80015cc:	e00c      	b.n	80015e8 <test_Esp+0x34>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 80015ce:	2300      	movs	r3, #0
 80015d0:	9302      	str	r3, [sp, #8]
 80015d2:	2318      	movs	r3, #24
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2300      	movs	r3, #0
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <test_Esp+0x40>)
 80015e0:	2132      	movs	r1, #50	; 0x32
 80015e2:	200a      	movs	r0, #10
 80015e4:	f7ff fec0 	bl	8001368 <lcd_ShowStr>
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	08007068 	.word	0x08007068
 80015f4:	0800706c 	.word	0x0800706c

080015f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fe:	f000 fedf 	bl	80023c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001602:	f000 f82f 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001606:	f7ff f9e3 	bl	80009d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800160a:	f7ff f8f1 	bl	80007f0 <MX_DMA_Init>
  MX_SPI1_Init();
 800160e:	f000 f923 	bl	8001858 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001612:	f7ff f90d 	bl	8000830 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001616:	f7ff fb15 	bl	8000c44 <MX_I2C1_Init>
  MX_TIM13_Init();
 800161a:	f000 facd 	bl	8001bb8 <MX_TIM13_Init>
  MX_TIM2_Init();
 800161e:	f000 fa7f 	bl	8001b20 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001622:	f7fe ff4f 	bl	80004c4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001626:	f000 fa2b 	bl	8001a80 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800162a:	f000 fd7f 	bl	800212c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800162e:	f000 fd53 	bl	80020d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001632:	f000 fda5 	bl	8002180 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001636:	f000 f87f 	bl	8001738 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff fbf6 	bl	8000e2c <lcd_Clear>
 uint8_t rs485_buffer[50];
 while (1)
  {
	  // 50ms task
	  if(flag_timer2 == 1){
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <main+0x68>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d1fb      	bne.n	8001640 <main+0x48>
		  flag_timer2 = 0;
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <main+0x68>)
 800164a:	2200      	movs	r2, #0
 800164c:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 800164e:	f7ff f863 	bl	8000718 <button_Scan>
		  test_Esp();
 8001652:	f7ff ffaf 	bl	80015b4 <test_Esp>
		  lightProcess();
 8001656:	f7ff ff77 	bl	8001548 <lightProcess>
		  test_LedDebug();
 800165a:	f000 f87f 	bl	800175c <test_LedDebug>
	  if(flag_timer2 == 1){
 800165e:	e7ef      	b.n	8001640 <main+0x48>
 8001660:	200001ba 	.word	0x200001ba

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	; 0x50
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	2230      	movs	r2, #48	; 0x30
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f005 fcbc 	bl	8006ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <SystemClock_Config+0xcc>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a27      	ldr	r2, [pc, #156]	; (8001730 <SystemClock_Config+0xcc>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <SystemClock_Config+0xcc>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <SystemClock_Config+0xd0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a21      	ldr	r2, [pc, #132]	; (8001734 <SystemClock_Config+0xd0>)
 80016ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <SystemClock_Config+0xd0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c0:	2302      	movs	r3, #2
 80016c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c4:	2301      	movs	r3, #1
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c8:	2310      	movs	r3, #16
 80016ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016cc:	2302      	movs	r3, #2
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016d0:	2300      	movs	r3, #0
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016d4:	2308      	movs	r3, #8
 80016d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016d8:	23a8      	movs	r3, #168	; 0xa8
 80016da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016dc:	2302      	movs	r3, #2
 80016de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016e0:	2304      	movs	r3, #4
 80016e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 f903 	bl	80038f4 <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016f4:	f000 f856 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fc:	2302      	movs	r3, #2
 80016fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001704:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800170a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800170e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2105      	movs	r1, #5
 8001716:	4618      	mov	r0, r3
 8001718:	f002 fb64 	bl	8003de4 <HAL_RCC_ClockConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001722:	f000 f83f 	bl	80017a4 <Error_Handler>
  }
}
 8001726:	bf00      	nop
 8001728:	3750      	adds	r7, #80	; 0x50
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000

08001738 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	  timer_init();
 800173c:	f000 f838 	bl	80017b0 <timer_init>
	  button_init();
 8001740:	f7fe ffde 	bl	8000700 <button_init>
	  lcd_init();
 8001744:	f7ff fcb0 	bl	80010a8 <lcd_init>
	  uart_init_esp();
 8001748:	f000 fb26 	bl	8001d98 <uart_init_esp>
	  uart_init_rs485();
 800174c:	f000 fb0e 	bl	8001d6c <uart_init_rs485>
	  setTimer2(50);
 8001750:	2032      	movs	r0, #50	; 0x32
 8001752:	f000 f83b 	bl	80017cc <setTimer2>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <test_LedDebug+0x3c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <test_LedDebug+0x40>)
 8001768:	fb83 1302 	smull	r1, r3, r3, r2
 800176c:	10d9      	asrs	r1, r3, #3
 800176e:	17d3      	asrs	r3, r2, #31
 8001770:	1ac9      	subs	r1, r1, r3
 8001772:	460b      	mov	r3, r1
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	1ad1      	subs	r1, r2, r3
 800177c:	b2ca      	uxtb	r2, r1
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <test_LedDebug+0x3c>)
 8001780:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <test_LedDebug+0x3c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800178a:	2110      	movs	r1, #16
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <test_LedDebug+0x44>)
 800178e:	f001 ff52 	bl	8003636 <HAL_GPIO_TogglePin>
	}
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200001b9 	.word	0x200001b9
 800179c:	66666667 	.word	0x66666667
 80017a0:	40021000 	.word	0x40021000

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	e7fe      	b.n	80017ac <Error_Handler+0x8>
	...

080017b0 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <timer_init+0x14>)
 80017b6:	f003 fbd9 	bl	8004f6c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80017ba:	4803      	ldr	r0, [pc, #12]	; (80017c8 <timer_init+0x18>)
 80017bc:	f003 fb6e 	bl	8004e9c <HAL_TIM_Base_Start>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000260 	.word	0x20000260
 80017c8:	20000218 	.word	0x20000218

080017cc <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <setTimer2+0x2c>)
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <setTimer2+0x2c>)
 80017de:	881a      	ldrh	r2, [r3, #0]
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <setTimer2+0x30>)
 80017e2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <setTimer2+0x34>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	801a      	strh	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200001be 	.word	0x200001be
 80017fc:	200001bc 	.word	0x200001bc
 8001800:	200001ba 	.word	0x200001ba

08001804 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001814:	d116      	bne.n	8001844 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d010      	beq.n	8001840 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	3b01      	subs	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001828:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001834:	2201      	movs	r2, #1
 8001836:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800183a:	881a      	ldrh	r2, [r3, #0]
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800183e:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001840:	f7ff fdf6 	bl	8001430 <led7_Scan>
	}
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200001bc 	.word	0x200001bc
 8001850:	200001ba 	.word	0x200001ba
 8001854:	200001be 	.word	0x200001be

08001858 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_SPI1_Init+0x64>)
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <MX_SPI1_Init+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_SPI1_Init+0x64>)
 8001864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001868:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_SPI1_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_SPI1_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_SPI1_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_SPI1_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_SPI1_Init+0x64>)
 8001884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001888:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_SPI1_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <MX_SPI1_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_SPI1_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <MX_SPI1_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_SPI1_Init+0x64>)
 80018a4:	220a      	movs	r2, #10
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_SPI1_Init+0x64>)
 80018aa:	f002 fcbb 	bl	8004224 <HAL_SPI_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018b4:	f7ff ff76 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200001c0 	.word	0x200001c0
 80018c0:	40013000 	.word	0x40013000

080018c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_SPI_MspInit+0x84>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d12b      	bne.n	800193e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_SPI_MspInit+0x88>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_SPI_MspInit+0x88>)
 80018f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_SPI_MspInit+0x88>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_SPI_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_SPI_MspInit+0x88>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_SPI_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800191e:	2338      	movs	r3, #56	; 0x38
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800192e:	2305      	movs	r3, #5
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <HAL_SPI_MspInit+0x8c>)
 800193a:	f001 fcc7 	bl	80032cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	; 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40013000 	.word	0x40013000
 800194c:	40023800 	.word	0x40023800
 8001950:	40020400 	.word	0x40020400

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_MspInit+0x4c>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_MspInit+0x4c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_MspInit+0x4c>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 fd38 	bl	8002464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <TIM2_IRQHandler+0x10>)
 80019fe:	f003 fb7e 	bl	80050fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000260 	.word	0x20000260

08001a0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <USART1_IRQHandler+0x10>)
 8001a12:	f004 fab9 	bl	8005f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002fc 	.word	0x200002fc

08001a20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <USART2_IRQHandler+0x10>)
 8001a26:	f004 faaf 	bl	8005f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000340 	.word	0x20000340

08001a34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <USART3_IRQHandler+0x10>)
 8001a3a:	f004 faa5 	bl	8005f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000384 	.word	0x20000384

08001a48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <DMA2_Stream0_IRQHandler+0x10>)
 8001a4e:	f001 fa01 	bl	8002e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000080 	.word	0x20000080

08001a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <SystemInit+0x20>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <SystemInit+0x20>)
 8001a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a94:	463b      	mov	r3, r7
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <MX_TIM1_Init+0x98>)
 8001a9e:	4a1f      	ldr	r2, [pc, #124]	; (8001b1c <MX_TIM1_Init+0x9c>)
 8001aa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <MX_TIM1_Init+0x98>)
 8001aa4:	2253      	movs	r2, #83	; 0x53
 8001aa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <MX_TIM1_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_TIM1_Init+0x98>)
 8001ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <MX_TIM1_Init+0x98>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <MX_TIM1_Init+0x98>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <MX_TIM1_Init+0x98>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ac8:	4813      	ldr	r0, [pc, #76]	; (8001b18 <MX_TIM1_Init+0x98>)
 8001aca:	f003 f997 	bl	8004dfc <HAL_TIM_Base_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ad4:	f7ff fe66 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001adc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <MX_TIM1_Init+0x98>)
 8001ae6:	f003 fcd5 	bl	8005494 <HAL_TIM_ConfigClockSource>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001af0:	f7ff fe58 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001afc:	463b      	mov	r3, r7
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_TIM1_Init+0x98>)
 8001b02:	f004 f8a1 	bl	8005c48 <HAL_TIMEx_MasterConfigSynchronization>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b0c:	f7ff fe4a 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000218 	.word	0x20000218
 8001b1c:	40010000 	.word	0x40010000

08001b20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <MX_TIM2_Init+0x94>)
 8001b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <MX_TIM2_Init+0x94>)
 8001b46:	f240 3247 	movw	r2, #839	; 0x347
 8001b4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_TIM2_Init+0x94>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_TIM2_Init+0x94>)
 8001b54:	2263      	movs	r2, #99	; 0x63
 8001b56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_TIM2_Init+0x94>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <MX_TIM2_Init+0x94>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b64:	4813      	ldr	r0, [pc, #76]	; (8001bb4 <MX_TIM2_Init+0x94>)
 8001b66:	f003 f949 	bl	8004dfc <HAL_TIM_Base_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b70:	f7ff fe18 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <MX_TIM2_Init+0x94>)
 8001b82:	f003 fc87 	bl	8005494 <HAL_TIM_ConfigClockSource>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b8c:	f7ff fe0a 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_TIM2_Init+0x94>)
 8001b9e:	f004 f853 	bl	8005c48 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ba8:	f7ff fdfc 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000260 	.word	0x20000260

08001bb8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
 8001bcc:	615a      	str	r2, [r3, #20]
 8001bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <MX_TIM13_Init+0x94>)
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <MX_TIM13_Init+0x98>)
 8001bd4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <MX_TIM13_Init+0x94>)
 8001bd8:	f240 3247 	movw	r2, #839	; 0x347
 8001bdc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_TIM13_Init+0x94>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <MX_TIM13_Init+0x94>)
 8001be6:	2263      	movs	r2, #99	; 0x63
 8001be8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_TIM13_Init+0x94>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <MX_TIM13_Init+0x94>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001bf6:	4815      	ldr	r0, [pc, #84]	; (8001c4c <MX_TIM13_Init+0x94>)
 8001bf8:	f003 f900 	bl	8004dfc <HAL_TIM_Base_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001c02:	f7ff fdcf 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001c06:	4811      	ldr	r0, [pc, #68]	; (8001c4c <MX_TIM13_Init+0x94>)
 8001c08:	f003 fa20 	bl	800504c <HAL_TIM_PWM_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001c12:	f7ff fdc7 	bl	80017a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c16:	2360      	movs	r3, #96	; 0x60
 8001c18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <MX_TIM13_Init+0x94>)
 8001c2e:	f003 fb6f 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001c38:	f7ff fdb4 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <MX_TIM13_Init+0x94>)
 8001c3e:	f000 f85b 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 8001c42:	bf00      	nop
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200002a8 	.word	0x200002a8
 8001c50:	40001c00 	.word	0x40001c00

08001c54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a22      	ldr	r2, [pc, #136]	; (8001cec <HAL_TIM_Base_MspInit+0x98>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10e      	bne.n	8001c84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a20      	ldr	r2, [pc, #128]	; (8001cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001c82:	e02e      	b.n	8001ce2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8c:	d116      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	201c      	movs	r0, #28
 8001cb0:	f000 ff59 	bl	8002b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cb4:	201c      	movs	r0, #28
 8001cb6:	f000 ff72 	bl	8002b9e <HAL_NVIC_EnableIRQ>
}
 8001cba:	e012      	b.n	8001ce2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	; (8001cf4 <HAL_TIM_Base_MspInit+0xa0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_TIM_Base_MspInit+0x9c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40001c00 	.word	0x40001c00

08001cf8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d11e      	bne.n	8001d58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_TIM_MspPostInit+0x6c>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_TIM_MspPostInit+0x6c>)
 8001d24:	f043 0320 	orr.w	r3, r3, #32
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_TIM_MspPostInit+0x6c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001d48:	2309      	movs	r3, #9
 8001d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	4619      	mov	r1, r3
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_TIM_MspPostInit+0x70>)
 8001d54:	f001 faba 	bl	80032cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40001c00 	.word	0x40001c00
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40021400 	.word	0x40021400

08001d6c <uart_init_rs485>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_rs485(){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, data, 9);
 8001d70:	2209      	movs	r2, #9
 8001d72:	4906      	ldr	r1, [pc, #24]	; (8001d8c <uart_init_rs485+0x20>)
 8001d74:	4806      	ldr	r0, [pc, #24]	; (8001d90 <uart_init_rs485+0x24>)
 8001d76:	f004 f8d6 	bl	8005f26 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d80:	4804      	ldr	r0, [pc, #16]	; (8001d94 <uart_init_rs485+0x28>)
 8001d82:	f001 fc3f 	bl	8003604 <HAL_GPIO_WritePin>
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200002f0 	.word	0x200002f0
 8001d90:	20000384 	.word	0x20000384
 8001d94:	40020000 	.word	0x40020000

08001d98 <uart_init_esp>:

void uart_init_esp(){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4906      	ldr	r1, [pc, #24]	; (8001db8 <uart_init_esp+0x20>)
 8001da0:	4806      	ldr	r0, [pc, #24]	; (8001dbc <uart_init_esp+0x24>)
 8001da2:	f004 f8c0 	bl	8005f26 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8001da6:	2201      	movs	r2, #1
 8001da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dac:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <uart_init_esp+0x28>)
 8001dae:	f001 fc29 	bl	8003604 <HAL_GPIO_WritePin>
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200002fa 	.word	0x200002fa
 8001dbc:	20000340 	.word	0x20000340
 8001dc0:	40021400 	.word	0x40021400

08001dc4 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8001dd0:	887a      	ldrh	r2, [r7, #2]
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <uart_EspSendBytes+0x20>)
 8001dd8:	f004 f813 	bl	8005e02 <HAL_UART_Transmit>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000340 	.word	0x20000340

08001de8 <statusButton1>:
	if(data == 0x81){
		HAL_UART_Transmit(&huart1, " is OFF.", 8, 100);
	}
}

void statusButton1(data2, data4, data7){
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
	if(data2 == 03 && data4 == 01 && data7 == 0x80){
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d10b      	bne.n	8001e12 <statusButton1+0x2a>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d108      	bne.n	8001e12 <statusButton1+0x2a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b80      	cmp	r3, #128	; 0x80
 8001e04:	d105      	bne.n	8001e12 <statusButton1+0x2a>
		status_but1 = 'H'; //ON
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <statusButton1+0x54>)
 8001e08:	2248      	movs	r2, #72	; 0x48
 8001e0a:	701a      	strb	r2, [r3, #0]
		status_send_esp = 'u';
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <statusButton1+0x58>)
 8001e0e:	2275      	movs	r2, #117	; 0x75
 8001e10:	701a      	strb	r2, [r3, #0]
	}
	if(data2 == 03 && data4 == 01 && data7 == 0x81){
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d10b      	bne.n	8001e30 <statusButton1+0x48>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <statusButton1+0x48>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b81      	cmp	r3, #129	; 0x81
 8001e22:	d105      	bne.n	8001e30 <statusButton1+0x48>
		status_but1 = 'L'; //OFF
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <statusButton1+0x54>)
 8001e26:	224c      	movs	r2, #76	; 0x4c
 8001e28:	701a      	strb	r2, [r3, #0]
		status_send_esp = 'U';
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <statusButton1+0x58>)
 8001e2c:	2255      	movs	r2, #85	; 0x55
 8001e2e:	701a      	strb	r2, [r3, #0]
	}
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	2000000c 	.word	0x2000000c
 8001e40:	20000010 	.word	0x20000010

08001e44 <statusButton2>:

void statusButton2(data2, data4, data7){
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
	if(data2 == 03 && data4 == 02 && data7 == 0x80){
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d10b      	bne.n	8001e6e <statusButton2+0x2a>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d108      	bne.n	8001e6e <statusButton2+0x2a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b80      	cmp	r3, #128	; 0x80
 8001e60:	d105      	bne.n	8001e6e <statusButton2+0x2a>
		status_but2 = 'H'; //ON
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <statusButton2+0x54>)
 8001e64:	2248      	movs	r2, #72	; 0x48
 8001e66:	701a      	strb	r2, [r3, #0]
		status_send_esp = 'v';
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <statusButton2+0x58>)
 8001e6a:	2276      	movs	r2, #118	; 0x76
 8001e6c:	701a      	strb	r2, [r3, #0]
	}
	if(data2 == 03 && data4 == 02 && data7 == 0x81){
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d10b      	bne.n	8001e8c <statusButton2+0x48>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d108      	bne.n	8001e8c <statusButton2+0x48>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b81      	cmp	r3, #129	; 0x81
 8001e7e:	d105      	bne.n	8001e8c <statusButton2+0x48>
		status_but2 = 'L'; //OFF
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <statusButton2+0x54>)
 8001e82:	224c      	movs	r2, #76	; 0x4c
 8001e84:	701a      	strb	r2, [r3, #0]
		status_send_esp = 'V';
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <statusButton2+0x58>)
 8001e88:	2256      	movs	r2, #86	; 0x56
 8001e8a:	701a      	strb	r2, [r3, #0]
	}
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	2000000d 	.word	0x2000000d
 8001e9c:	20000010 	.word	0x20000010

08001ea0 <statusDevice1>:

void statusDevice1(data2, data4, data7){
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
	if(data2 == 04 && data4 == 00 && data7 == 0x80){
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d10b      	bne.n	8001eca <statusDevice1+0x2a>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d108      	bne.n	8001eca <statusDevice1+0x2a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b80      	cmp	r3, #128	; 0x80
 8001ebc:	d105      	bne.n	8001eca <statusDevice1+0x2a>
		status_d1 = 'H'; //ON
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <statusDevice1+0x54>)
 8001ec0:	2248      	movs	r2, #72	; 0x48
 8001ec2:	701a      	strb	r2, [r3, #0]
		status_send_esp = 'm';
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <statusDevice1+0x58>)
 8001ec6:	226d      	movs	r2, #109	; 0x6d
 8001ec8:	701a      	strb	r2, [r3, #0]
	}
	if(data2 == 04 && data4 == 00 && data7 == 0x81){
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d10b      	bne.n	8001ee8 <statusDevice1+0x48>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d108      	bne.n	8001ee8 <statusDevice1+0x48>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b81      	cmp	r3, #129	; 0x81
 8001eda:	d105      	bne.n	8001ee8 <statusDevice1+0x48>
		status_d1 = 'L'; //OFF
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <statusDevice1+0x54>)
 8001ede:	224c      	movs	r2, #76	; 0x4c
 8001ee0:	701a      	strb	r2, [r3, #0]
		status_send_esp = 'M';
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <statusDevice1+0x58>)
 8001ee4:	224d      	movs	r2, #77	; 0x4d
 8001ee6:	701a      	strb	r2, [r3, #0]
	}
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	2000000e 	.word	0x2000000e
 8001ef8:	20000010 	.word	0x20000010

08001efc <statusDevice2>:

void statusDevice2(data2, data4, data7){
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
	if(data2 == 04 && data4 == 01 && data7 == 0x80){
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d10b      	bne.n	8001f26 <statusDevice2+0x2a>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d108      	bne.n	8001f26 <statusDevice2+0x2a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b80      	cmp	r3, #128	; 0x80
 8001f18:	d105      	bne.n	8001f26 <statusDevice2+0x2a>
		status_d2 = 'H'; //ON
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <statusDevice2+0x54>)
 8001f1c:	2248      	movs	r2, #72	; 0x48
 8001f1e:	701a      	strb	r2, [r3, #0]
		status_send_esp ='n';
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <statusDevice2+0x58>)
 8001f22:	226e      	movs	r2, #110	; 0x6e
 8001f24:	701a      	strb	r2, [r3, #0]
	}
	if(data2 == 04 && data4 == 01 && data7 == 0x81){
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d10b      	bne.n	8001f44 <statusDevice2+0x48>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d108      	bne.n	8001f44 <statusDevice2+0x48>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b81      	cmp	r3, #129	; 0x81
 8001f36:	d105      	bne.n	8001f44 <statusDevice2+0x48>
		status_d2 = 'L'; //OFF
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <statusDevice2+0x54>)
 8001f3a:	224c      	movs	r2, #76	; 0x4c
 8001f3c:	701a      	strb	r2, [r3, #0]
		status_send_esp = 'N';
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <statusDevice2+0x58>)
 8001f40:	224e      	movs	r2, #78	; 0x4e
 8001f42:	701a      	strb	r2, [r3, #0]
	}
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	2000000f 	.word	0x2000000f
 8001f54:	20000010 	.word	0x20000010

08001f58 <statusMotion>:

void statusMotion(data0){
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	if(data0 == 0x9C){
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b9c      	cmp	r3, #156	; 0x9c
 8001f64:	d102      	bne.n	8001f6c <statusMotion+0x14>
		status_send_esp = 's';
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <statusMotion+0x20>)
 8001f68:	2273      	movs	r2, #115	; 0x73
 8001f6a:	701a      	strb	r2, [r3, #0]
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	20000010 	.word	0x20000010

08001f7c <HAL_UART_RxCpltCallback>:
		HAL_UART_Transmit(&huart1, "Device 2 is OFF.\n", 17, 100);
	if(status_d2 == 'L')
		HAL_UART_Transmit(&huart1, "Device 2 is ON.\n", 16, 100);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a3f      	ldr	r2, [pc, #252]	; (8002088 <HAL_UART_RxCpltCallback+0x10c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10a      	bne.n	8001fa4 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001f8e:	230a      	movs	r3, #10
 8001f90:	2201      	movs	r2, #1
 8001f92:	493e      	ldr	r1, [pc, #248]	; (800208c <HAL_UART_RxCpltCallback+0x110>)
 8001f94:	483e      	ldr	r0, [pc, #248]	; (8002090 <HAL_UART_RxCpltCallback+0x114>)
 8001f96:	f003 ff34 	bl	8005e02 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	493b      	ldr	r1, [pc, #236]	; (800208c <HAL_UART_RxCpltCallback+0x110>)
 8001f9e:	483c      	ldr	r0, [pc, #240]	; (8002090 <HAL_UART_RxCpltCallback+0x114>)
 8001fa0:	f003 ffc1 	bl	8005f26 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a3a      	ldr	r2, [pc, #232]	; (8002094 <HAL_UART_RxCpltCallback+0x118>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d11f      	bne.n	8001fee <HAL_UART_RxCpltCallback+0x72>
		if(receive_buffer2 == 'O') check_esp = 1;
 8001fae:	4b3a      	ldr	r3, [pc, #232]	; (8002098 <HAL_UART_RxCpltCallback+0x11c>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b4f      	cmp	r3, #79	; 0x4f
 8001fb4:	d103      	bne.n	8001fbe <HAL_UART_RxCpltCallback+0x42>
 8001fb6:	4b39      	ldr	r3, [pc, #228]	; (800209c <HAL_UART_RxCpltCallback+0x120>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	e00e      	b.n	8001fdc <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8001fbe:	4b36      	ldr	r3, [pc, #216]	; (8002098 <HAL_UART_RxCpltCallback+0x11c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b61      	cmp	r3, #97	; 0x61
 8001fc4:	d103      	bne.n	8001fce <HAL_UART_RxCpltCallback+0x52>
 8001fc6:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <HAL_UART_RxCpltCallback+0x124>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	e006      	b.n	8001fdc <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8001fce:	4b32      	ldr	r3, [pc, #200]	; (8002098 <HAL_UART_RxCpltCallback+0x11c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b41      	cmp	r3, #65	; 0x41
 8001fd4:	d102      	bne.n	8001fdc <HAL_UART_RxCpltCallback+0x60>
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_UART_RxCpltCallback+0x124>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	492e      	ldr	r1, [pc, #184]	; (8002098 <HAL_UART_RxCpltCallback+0x11c>)
 8001fe0:	4830      	ldr	r0, [pc, #192]	; (80020a4 <HAL_UART_RxCpltCallback+0x128>)
 8001fe2:	f003 ffa0 	bl	8005f26 <HAL_UART_Receive_IT>
		uart_EspSendBytes(&status_send_esp, 1);
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	482f      	ldr	r0, [pc, #188]	; (80020a8 <HAL_UART_RxCpltCallback+0x12c>)
 8001fea:	f7ff feeb 	bl	8001dc4 <uart_EspSendBytes>
	}

	if(huart->Instance == USART3){
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2e      	ldr	r2, [pc, #184]	; (80020ac <HAL_UART_RxCpltCallback+0x130>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d143      	bne.n	8002080 <HAL_UART_RxCpltCallback+0x104>
        if (huart->RxXferSize == 9) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	d13b      	bne.n	8002078 <HAL_UART_RxCpltCallback+0xfc>
        	HAL_UART_Receive_IT(&huart3, data, 9);
 8002000:	2209      	movs	r2, #9
 8002002:	492b      	ldr	r1, [pc, #172]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 8002004:	482b      	ldr	r0, [pc, #172]	; (80020b4 <HAL_UART_RxCpltCallback+0x138>)
 8002006:	f003 ff8e 	bl	8005f26 <HAL_UART_Receive_IT>
			statusButton1(data[2], data[4], data[7]);
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 800200c:	789b      	ldrb	r3, [r3, #2]
 800200e:	4618      	mov	r0, r3
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 8002012:	791b      	ldrb	r3, [r3, #4]
 8002014:	4619      	mov	r1, r3
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 8002018:	79db      	ldrb	r3, [r3, #7]
 800201a:	461a      	mov	r2, r3
 800201c:	f7ff fee4 	bl	8001de8 <statusButton1>
			statusButton2(data[2], data[4], data[7]);
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 8002022:	789b      	ldrb	r3, [r3, #2]
 8002024:	4618      	mov	r0, r3
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 8002028:	791b      	ldrb	r3, [r3, #4]
 800202a:	4619      	mov	r1, r3
 800202c:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 800202e:	79db      	ldrb	r3, [r3, #7]
 8002030:	461a      	mov	r2, r3
 8002032:	f7ff ff07 	bl	8001e44 <statusButton2>
			statusDevice1(data[2], data[4], data[7]);
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 8002038:	789b      	ldrb	r3, [r3, #2]
 800203a:	4618      	mov	r0, r3
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 800203e:	791b      	ldrb	r3, [r3, #4]
 8002040:	4619      	mov	r1, r3
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 8002044:	79db      	ldrb	r3, [r3, #7]
 8002046:	461a      	mov	r2, r3
 8002048:	f7ff ff2a 	bl	8001ea0 <statusDevice1>
			statusDevice2(data[2], data[4], data[7]);
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 800204e:	789b      	ldrb	r3, [r3, #2]
 8002050:	4618      	mov	r0, r3
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 8002054:	791b      	ldrb	r3, [r3, #4]
 8002056:	4619      	mov	r1, r3
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 800205a:	79db      	ldrb	r3, [r3, #7]
 800205c:	461a      	mov	r2, r3
 800205e:	f7ff ff4d 	bl	8001efc <statusDevice2>
			statusMotion(data[0]);
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff76 	bl	8001f58 <statusMotion>
	//		checkButton1();
	//		checkButton2();
	//		checkDevice1();
	//		checkDevice2();
	//		HAL_UART_Transmit(&huart1, "----------------------------------------", 50, 100);
			HAL_UART_Transmit(&huart1, data, 9, 10);
 800206c:	230a      	movs	r3, #10
 800206e:	2209      	movs	r2, #9
 8002070:	490f      	ldr	r1, [pc, #60]	; (80020b0 <HAL_UART_RxCpltCallback+0x134>)
 8002072:	4807      	ldr	r0, [pc, #28]	; (8002090 <HAL_UART_RxCpltCallback+0x114>)
 8002074:	f003 fec5 	bl	8005e02 <HAL_UART_Transmit>
//        } else if (huart->RxXferSize == 36) {
//        	HAL_UART_Receive_IT(&huart3, motion_data, 36);
//        	status_send_esp = 's'; //sensor
        }
		uart_EspSendBytes(&status_send_esp, 1);
 8002078:	2101      	movs	r1, #1
 800207a:	480b      	ldr	r0, [pc, #44]	; (80020a8 <HAL_UART_RxCpltCallback+0x12c>)
 800207c:	f7ff fea2 	bl	8001dc4 <uart_EspSendBytes>
	}
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40011000 	.word	0x40011000
 800208c:	200002f9 	.word	0x200002f9
 8002090:	200002fc 	.word	0x200002fc
 8002094:	40004400 	.word	0x40004400
 8002098:	200002fa 	.word	0x200002fa
 800209c:	200002fb 	.word	0x200002fb
 80020a0:	200001b8 	.word	0x200001b8
 80020a4:	20000340 	.word	0x20000340
 80020a8:	20000010 	.word	0x20000010
 80020ac:	40004800 	.word	0x40004800
 80020b0:	200002f0 	.word	0x200002f0
 80020b4:	20000384 	.word	0x20000384

080020b8 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <uart_EspCheck+0x1c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <uart_EspCheck+0x10>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <uart_EspCheck+0x12>
	return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	200002fb 	.word	0x200002fb

080020d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <MX_USART1_UART_Init+0x50>)
 80020e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 80020fe:	220c      	movs	r2, #12
 8002100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_USART1_UART_Init+0x4c>)
 8002110:	f003 fe2a 	bl	8005d68 <HAL_UART_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800211a:	f7ff fb43 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200002fc 	.word	0x200002fc
 8002128:	40011000 	.word	0x40011000

0800212c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <MX_USART2_UART_Init+0x4c>)
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <MX_USART2_UART_Init+0x50>)
 8002134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <MX_USART2_UART_Init+0x4c>)
 8002138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800213c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <MX_USART2_UART_Init+0x4c>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <MX_USART2_UART_Init+0x4c>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <MX_USART2_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <MX_USART2_UART_Init+0x4c>)
 8002152:	220c      	movs	r2, #12
 8002154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <MX_USART2_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <MX_USART2_UART_Init+0x4c>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002162:	4805      	ldr	r0, [pc, #20]	; (8002178 <MX_USART2_UART_Init+0x4c>)
 8002164:	f003 fe00 	bl	8005d68 <HAL_UART_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800216e:	f7ff fb19 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000340 	.word	0x20000340
 800217c:	40004400 	.word	0x40004400

08002180 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <MX_USART3_UART_Init+0x4c>)
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <MX_USART3_UART_Init+0x50>)
 8002188:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <MX_USART3_UART_Init+0x4c>)
 800218c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002190:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <MX_USART3_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <MX_USART3_UART_Init+0x4c>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <MX_USART3_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <MX_USART3_UART_Init+0x4c>)
 80021a6:	220c      	movs	r2, #12
 80021a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <MX_USART3_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <MX_USART3_UART_Init+0x4c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <MX_USART3_UART_Init+0x4c>)
 80021b8:	f003 fdd6 	bl	8005d68 <HAL_UART_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021c2:	f7ff faef 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000384 	.word	0x20000384
 80021d0:	40004800 	.word	0x40004800

080021d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08e      	sub	sp, #56	; 0x38
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a58      	ldr	r2, [pc, #352]	; (8002354 <HAL_UART_MspInit+0x180>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d135      	bne.n	8002262 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	4b57      	ldr	r3, [pc, #348]	; (8002358 <HAL_UART_MspInit+0x184>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a56      	ldr	r2, [pc, #344]	; (8002358 <HAL_UART_MspInit+0x184>)
 8002200:	f043 0310 	orr.w	r3, r3, #16
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b54      	ldr	r3, [pc, #336]	; (8002358 <HAL_UART_MspInit+0x184>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	623b      	str	r3, [r7, #32]
 8002210:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	4b50      	ldr	r3, [pc, #320]	; (8002358 <HAL_UART_MspInit+0x184>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <HAL_UART_MspInit+0x184>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <HAL_UART_MspInit+0x184>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800222e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002240:	2307      	movs	r3, #7
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002248:	4619      	mov	r1, r3
 800224a:	4844      	ldr	r0, [pc, #272]	; (800235c <HAL_UART_MspInit+0x188>)
 800224c:	f001 f83e 	bl	80032cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	2025      	movs	r0, #37	; 0x25
 8002256:	f000 fc86 	bl	8002b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800225a:	2025      	movs	r0, #37	; 0x25
 800225c:	f000 fc9f 	bl	8002b9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002260:	e073      	b.n	800234a <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a3e      	ldr	r2, [pc, #248]	; (8002360 <HAL_UART_MspInit+0x18c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d134      	bne.n	80022d6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	4b39      	ldr	r3, [pc, #228]	; (8002358 <HAL_UART_MspInit+0x184>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	4a38      	ldr	r2, [pc, #224]	; (8002358 <HAL_UART_MspInit+0x184>)
 8002276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227a:	6413      	str	r3, [r2, #64]	; 0x40
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_UART_MspInit+0x184>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	4b32      	ldr	r3, [pc, #200]	; (8002358 <HAL_UART_MspInit+0x184>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	4a31      	ldr	r2, [pc, #196]	; (8002358 <HAL_UART_MspInit+0x184>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6313      	str	r3, [r2, #48]	; 0x30
 8002298:	4b2f      	ldr	r3, [pc, #188]	; (8002358 <HAL_UART_MspInit+0x184>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022a4:	230c      	movs	r3, #12
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b0:	2303      	movs	r3, #3
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b4:	2307      	movs	r3, #7
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022bc:	4619      	mov	r1, r3
 80022be:	4827      	ldr	r0, [pc, #156]	; (800235c <HAL_UART_MspInit+0x188>)
 80022c0:	f001 f804 	bl	80032cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	2100      	movs	r1, #0
 80022c8:	2026      	movs	r0, #38	; 0x26
 80022ca:	f000 fc4c 	bl	8002b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022ce:	2026      	movs	r0, #38	; 0x26
 80022d0:	f000 fc65 	bl	8002b9e <HAL_NVIC_EnableIRQ>
}
 80022d4:	e039      	b.n	800234a <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a22      	ldr	r2, [pc, #136]	; (8002364 <HAL_UART_MspInit+0x190>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d134      	bne.n	800234a <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_UART_MspInit+0x184>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <HAL_UART_MspInit+0x184>)
 80022ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ee:	6413      	str	r3, [r2, #64]	; 0x40
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_UART_MspInit+0x184>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_UART_MspInit+0x184>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_UART_MspInit+0x184>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6313      	str	r3, [r2, #48]	; 0x30
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_UART_MspInit+0x184>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002318:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002326:	2303      	movs	r3, #3
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800232a:	2307      	movs	r3, #7
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002332:	4619      	mov	r1, r3
 8002334:	480c      	ldr	r0, [pc, #48]	; (8002368 <HAL_UART_MspInit+0x194>)
 8002336:	f000 ffc9 	bl	80032cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	2027      	movs	r0, #39	; 0x27
 8002340:	f000 fc11 	bl	8002b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002344:	2027      	movs	r0, #39	; 0x27
 8002346:	f000 fc2a 	bl	8002b9e <HAL_NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3738      	adds	r7, #56	; 0x38
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40011000 	.word	0x40011000
 8002358:	40023800 	.word	0x40023800
 800235c:	40020000 	.word	0x40020000
 8002360:	40004400 	.word	0x40004400
 8002364:	40004800 	.word	0x40004800
 8002368:	40020800 	.word	0x40020800

0800236c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800236c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002372:	490e      	ldr	r1, [pc, #56]	; (80023ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002378:	e002      	b.n	8002380 <LoopCopyDataInit>

0800237a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800237c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237e:	3304      	adds	r3, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002384:	d3f9      	bcc.n	800237a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002386:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002388:	4c0b      	ldr	r4, [pc, #44]	; (80023b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800238c:	e001      	b.n	8002392 <LoopFillZerobss>

0800238e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002390:	3204      	adds	r2, #4

08002392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002394:	d3fb      	bcc.n	800238e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002396:	f7ff fb61 	bl	8001a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239a:	f004 fe31 	bl	8007000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239e:	f7ff f92b 	bl	80015f8 <main>
  bx  lr    
 80023a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80023b0:	0800a028 	.word	0x0800a028
  ldr r2, =_sbss
 80023b4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80023b8:	200003cc 	.word	0x200003cc

080023bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC_IRQHandler>
	...

080023c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <HAL_Init+0x40>)
 80023ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_Init+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_Init+0x40>)
 80023d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_Init+0x40>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_Init+0x40>)
 80023e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e8:	2003      	movs	r0, #3
 80023ea:	f000 fbb1 	bl	8002b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ee:	200f      	movs	r0, #15
 80023f0:	f000 f808 	bl	8002404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f4:	f7ff faae 	bl	8001954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00

08002404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_InitTick+0x54>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_InitTick+0x58>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241a:	fbb3 f3f1 	udiv	r3, r3, r1
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fbc9 	bl	8002bba <HAL_SYSTICK_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00e      	b.n	8002450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0f      	cmp	r3, #15
 8002436:	d80a      	bhi.n	800244e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002438:	2200      	movs	r2, #0
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f000 fb91 	bl	8002b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002444:	4a06      	ldr	r2, [pc, #24]	; (8002460 <HAL_InitTick+0x5c>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000008 	.word	0x20000008
 800245c:	20000018 	.word	0x20000018
 8002460:	20000014 	.word	0x20000014

08002464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x20>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_IncTick+0x24>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_IncTick+0x24>)
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000018 	.word	0x20000018
 8002488:	200003c8 	.word	0x200003c8

0800248c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return uwTick;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_GetTick+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	200003c8 	.word	0x200003c8

080024a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff ffee 	bl	800248c <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d005      	beq.n	80024ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_Delay+0x44>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ca:	bf00      	nop
 80024cc:	f7ff ffde 	bl	800248c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d8f7      	bhi.n	80024cc <HAL_Delay+0x28>
  {
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000018 	.word	0x20000018

080024ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e033      	b.n	800256a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe f864 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d118      	bne.n	800255c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002532:	f023 0302 	bic.w	r3, r3, #2
 8002536:	f043 0202 	orr.w	r2, r3, #2
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f93a 	bl	80027b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	f043 0201 	orr.w	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
 800255a:	e001      	b.n	8002560 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1c>
 800258c:	2302      	movs	r3, #2
 800258e:	e105      	b.n	800279c <HAL_ADC_ConfigChannel+0x228>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b09      	cmp	r3, #9
 800259e:	d925      	bls.n	80025ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68d9      	ldr	r1, [r3, #12]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	3b1e      	subs	r3, #30
 80025b6:	2207      	movs	r2, #7
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43da      	mvns	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	400a      	ands	r2, r1
 80025c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68d9      	ldr	r1, [r3, #12]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	4603      	mov	r3, r0
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4403      	add	r3, r0
 80025de:	3b1e      	subs	r3, #30
 80025e0:	409a      	lsls	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	e022      	b.n	8002632 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6919      	ldr	r1, [r3, #16]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	2207      	movs	r2, #7
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	400a      	ands	r2, r1
 800260e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6919      	ldr	r1, [r3, #16]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	4603      	mov	r3, r0
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4403      	add	r3, r0
 8002628:	409a      	lsls	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b06      	cmp	r3, #6
 8002638:	d824      	bhi.n	8002684 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b05      	subs	r3, #5
 800264c:	221f      	movs	r2, #31
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	400a      	ands	r2, r1
 800265a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	3b05      	subs	r3, #5
 8002676:	fa00 f203 	lsl.w	r2, r0, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	635a      	str	r2, [r3, #52]	; 0x34
 8002682:	e04c      	b.n	800271e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d824      	bhi.n	80026d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	3b23      	subs	r3, #35	; 0x23
 800269e:	221f      	movs	r2, #31
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	3b23      	subs	r3, #35	; 0x23
 80026c8:	fa00 f203 	lsl.w	r2, r0, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
 80026d4:	e023      	b.n	800271e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b41      	subs	r3, #65	; 0x41
 80026e8:	221f      	movs	r2, #31
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	400a      	ands	r2, r1
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	4618      	mov	r0, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	3b41      	subs	r3, #65	; 0x41
 8002712:	fa00 f203 	lsl.w	r2, r0, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_ADC_ConfigChannel+0x234>)
 8002720:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <HAL_ADC_ConfigChannel+0x238>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d109      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1cc>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b12      	cmp	r3, #18
 8002732:	d105      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	; (80027ac <HAL_ADC_ConfigChannel+0x238>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d123      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x21e>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b10      	cmp	r3, #16
 8002750:	d003      	beq.n	800275a <HAL_ADC_ConfigChannel+0x1e6>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b11      	cmp	r3, #17
 8002758:	d11b      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d111      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_ADC_ConfigChannel+0x23c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a10      	ldr	r2, [pc, #64]	; (80027b4 <HAL_ADC_ConfigChannel+0x240>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	0c9a      	lsrs	r2, r3, #18
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002784:	e002      	b.n	800278c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3b01      	subs	r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f9      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40012300 	.word	0x40012300
 80027ac:	40012000 	.word	0x40012000
 80027b0:	20000008 	.word	0x20000008
 80027b4:	431bde83 	.word	0x431bde83

080027b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027c0:	4b79      	ldr	r3, [pc, #484]	; (80029a8 <ADC_Init+0x1f0>)
 80027c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	431a      	orrs	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	021a      	lsls	r2, r3, #8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6899      	ldr	r1, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	4a58      	ldr	r2, [pc, #352]	; (80029ac <ADC_Init+0x1f4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d022      	beq.n	8002896 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800285e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6899      	ldr	r1, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002880:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	e00f      	b.n	80028b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0202 	bic.w	r2, r2, #2
 80028c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6899      	ldr	r1, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7e1b      	ldrb	r3, [r3, #24]
 80028d0:	005a      	lsls	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01b      	beq.n	800291c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002902:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	3b01      	subs	r3, #1
 8002910:	035a      	lsls	r2, r3, #13
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	e007      	b.n	800292c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	3b01      	subs	r3, #1
 8002948:	051a      	lsls	r2, r3, #20
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6899      	ldr	r1, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800296e:	025a      	lsls	r2, r3, #9
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6899      	ldr	r1, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	029a      	lsls	r2, r3, #10
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40012300 	.word	0x40012300
 80029ac:	0f000001 	.word	0x0f000001

080029b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029cc:	4013      	ands	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e2:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	60d3      	str	r3, [r2, #12]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <__NVIC_GetPriorityGrouping+0x18>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f003 0307 	and.w	r3, r3, #7
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	db0b      	blt.n	8002a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	4907      	ldr	r1, [pc, #28]	; (8002a4c <__NVIC_EnableIRQ+0x38>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2001      	movs	r0, #1
 8002a36:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	e000e100 	.word	0xe000e100

08002a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	db0a      	blt.n	8002a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	490c      	ldr	r1, [pc, #48]	; (8002a9c <__NVIC_SetPriority+0x4c>)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	440b      	add	r3, r1
 8002a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a78:	e00a      	b.n	8002a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4908      	ldr	r1, [pc, #32]	; (8002aa0 <__NVIC_SetPriority+0x50>)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	3b04      	subs	r3, #4
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	761a      	strb	r2, [r3, #24]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000e100 	.word	0xe000e100
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f1c3 0307 	rsb	r3, r3, #7
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	bf28      	it	cs
 8002ac2:	2304      	movcs	r3, #4
 8002ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d902      	bls.n	8002ad4 <NVIC_EncodePriority+0x30>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3b03      	subs	r3, #3
 8002ad2:	e000      	b.n	8002ad6 <NVIC_EncodePriority+0x32>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43d9      	mvns	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	4313      	orrs	r3, r2
         );
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b1c:	d301      	bcc.n	8002b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00f      	b.n	8002b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b22:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <SysTick_Config+0x40>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2a:	210f      	movs	r1, #15
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f7ff ff8e 	bl	8002a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <SysTick_Config+0x40>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <SysTick_Config+0x40>)
 8002b3c:	2207      	movs	r2, #7
 8002b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	e000e010 	.word	0xe000e010

08002b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ff29 	bl	80029b0 <__NVIC_SetPriorityGrouping>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b78:	f7ff ff3e 	bl	80029f8 <__NVIC_GetPriorityGrouping>
 8002b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff ff8e 	bl	8002aa4 <NVIC_EncodePriority>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff5d 	bl	8002a50 <__NVIC_SetPriority>
}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff31 	bl	8002a14 <__NVIC_EnableIRQ>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ffa2 	bl	8002b0c <SysTick_Config>
 8002bc8:	4603      	mov	r3, r0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7ff fc54 	bl	800248c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e099      	b.n	8002d24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c10:	e00f      	b.n	8002c32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c12:	f7ff fc3b 	bl	800248c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d908      	bls.n	8002c32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2203      	movs	r2, #3
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e078      	b.n	8002d24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e8      	bne.n	8002c12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4b38      	ldr	r3, [pc, #224]	; (8002d2c <HAL_DMA_Init+0x158>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d107      	bne.n	8002c9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4313      	orrs	r3, r2
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f023 0307 	bic.w	r3, r3, #7
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d117      	bne.n	8002cf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fa7b 	bl	80031d4 <DMA_CheckFifoParam>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e016      	b.n	8002d24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa32 	bl	8003168 <DMA_CalcBaseAndBitshift>
 8002d04:	4603      	mov	r3, r0
 8002d06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	223f      	movs	r2, #63	; 0x3f
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	f010803f 	.word	0xf010803f

08002d30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d3e:	f7ff fba5 	bl	800248c <HAL_GetTick>
 8002d42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d008      	beq.n	8002d62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e052      	b.n	8002e08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0216 	bic.w	r2, r2, #22
 8002d70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <HAL_DMA_Abort+0x62>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0208 	bic.w	r2, r2, #8
 8002da0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db2:	e013      	b.n	8002ddc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002db4:	f7ff fb6a 	bl	800248c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	d90c      	bls.n	8002ddc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2203      	movs	r2, #3
 8002dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e015      	b.n	8002e08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1e4      	bne.n	8002db4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	223f      	movs	r2, #63	; 0x3f
 8002df0:	409a      	lsls	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d004      	beq.n	8002e2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e00c      	b.n	8002e48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2205      	movs	r2, #5
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e60:	4b8e      	ldr	r3, [pc, #568]	; (800309c <HAL_DMA_IRQHandler+0x248>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a8e      	ldr	r2, [pc, #568]	; (80030a0 <HAL_DMA_IRQHandler+0x24c>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	0a9b      	lsrs	r3, r3, #10
 8002e6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	2208      	movs	r2, #8
 8002e80:	409a      	lsls	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01a      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d013      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0204 	bic.w	r2, r2, #4
 8002ea6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	2208      	movs	r2, #8
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d012      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f043 0202 	orr.w	r2, r3, #2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	2204      	movs	r2, #4
 8002efc:	409a      	lsls	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d012      	beq.n	8002f2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f18:	2204      	movs	r2, #4
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f043 0204 	orr.w	r2, r3, #4
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f30:	2210      	movs	r2, #16
 8002f32:	409a      	lsls	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d043      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d03c      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	2210      	movs	r2, #16
 8002f50:	409a      	lsls	r2, r3
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d018      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d108      	bne.n	8002f84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d024      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
 8002f82:	e01f      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01b      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4798      	blx	r3
 8002f94:	e016      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0208 	bic.w	r2, r2, #8
 8002fb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	2220      	movs	r2, #32
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 808f 	beq.w	80030f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8087 	beq.w	80030f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	2220      	movs	r2, #32
 8002fec:	409a      	lsls	r2, r3
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	d136      	bne.n	800306c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0216 	bic.w	r2, r2, #22
 800300c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800301c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <HAL_DMA_IRQHandler+0x1da>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0208 	bic.w	r2, r2, #8
 800303c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	223f      	movs	r2, #63	; 0x3f
 8003044:	409a      	lsls	r2, r3
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305e:	2b00      	cmp	r3, #0
 8003060:	d07e      	beq.n	8003160 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
        }
        return;
 800306a:	e079      	b.n	8003160 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01d      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10d      	bne.n	80030a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	2b00      	cmp	r3, #0
 800308e:	d031      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
 8003098:	e02c      	b.n	80030f4 <HAL_DMA_IRQHandler+0x2a0>
 800309a:	bf00      	nop
 800309c:	20000008 	.word	0x20000008
 80030a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d023      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	4798      	blx	r3
 80030b4:	e01e      	b.n	80030f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10f      	bne.n	80030e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0210 	bic.w	r2, r2, #16
 80030d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d032      	beq.n	8003162 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d022      	beq.n	800314e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2205      	movs	r2, #5
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	3301      	adds	r3, #1
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	d307      	bcc.n	800313c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f2      	bne.n	8003120 <HAL_DMA_IRQHandler+0x2cc>
 800313a:	e000      	b.n	800313e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800313c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
 800315e:	e000      	b.n	8003162 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003160:	bf00      	nop
    }
  }
}
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	3b10      	subs	r3, #16
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <DMA_CalcBaseAndBitshift+0x64>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003182:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d909      	bls.n	80031aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800319e:	f023 0303 	bic.w	r3, r3, #3
 80031a2:	1d1a      	adds	r2, r3, #4
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	659a      	str	r2, [r3, #88]	; 0x58
 80031a8:	e007      	b.n	80031ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	aaaaaaab 	.word	0xaaaaaaab
 80031d0:	0800a010 	.word	0x0800a010

080031d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d11f      	bne.n	800322e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d856      	bhi.n	80032a2 <DMA_CheckFifoParam+0xce>
 80031f4:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <DMA_CheckFifoParam+0x28>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	0800320d 	.word	0x0800320d
 8003200:	0800321f 	.word	0x0800321f
 8003204:	0800320d 	.word	0x0800320d
 8003208:	080032a3 	.word	0x080032a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d046      	beq.n	80032a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800321c:	e043      	b.n	80032a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003226:	d140      	bne.n	80032aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322c:	e03d      	b.n	80032aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003236:	d121      	bne.n	800327c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b03      	cmp	r3, #3
 800323c:	d837      	bhi.n	80032ae <DMA_CheckFifoParam+0xda>
 800323e:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <DMA_CheckFifoParam+0x70>)
 8003240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003244:	08003255 	.word	0x08003255
 8003248:	0800325b 	.word	0x0800325b
 800324c:	08003255 	.word	0x08003255
 8003250:	0800326d 	.word	0x0800326d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      break;
 8003258:	e030      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d025      	beq.n	80032b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800326a:	e022      	b.n	80032b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003274:	d11f      	bne.n	80032b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800327a:	e01c      	b.n	80032b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d903      	bls.n	800328a <DMA_CheckFifoParam+0xb6>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b03      	cmp	r3, #3
 8003286:	d003      	beq.n	8003290 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003288:	e018      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
      break;
 800328e:	e015      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      break;
 80032a0:	e00b      	b.n	80032ba <DMA_CheckFifoParam+0xe6>
      break;
 80032a2:	bf00      	nop
 80032a4:	e00a      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;
 80032a6:	bf00      	nop
 80032a8:	e008      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;
 80032aa:	bf00      	nop
 80032ac:	e006      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;
 80032ae:	bf00      	nop
 80032b0:	e004      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;
 80032b2:	bf00      	nop
 80032b4:	e002      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;   
 80032b6:	bf00      	nop
 80032b8:	e000      	b.n	80032bc <DMA_CheckFifoParam+0xe8>
      break;
 80032ba:	bf00      	nop
    }
  } 
  
  return status; 
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop

080032cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	; 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	e16b      	b.n	80035c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032e8:	2201      	movs	r2, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	429a      	cmp	r2, r3
 8003302:	f040 815a 	bne.w	80035ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d005      	beq.n	800331e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331a:	2b02      	cmp	r3, #2
 800331c:	d130      	bne.n	8003380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	2203      	movs	r2, #3
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003354:	2201      	movs	r2, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 0201 	and.w	r2, r3, #1
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b03      	cmp	r3, #3
 800338a:	d017      	beq.n	80033bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d123      	bne.n	8003410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	08da      	lsrs	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3208      	adds	r2, #8
 80033d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	220f      	movs	r2, #15
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	08da      	lsrs	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3208      	adds	r2, #8
 800340a:	69b9      	ldr	r1, [r7, #24]
 800340c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0203 	and.w	r2, r3, #3
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80b4 	beq.w	80035ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b60      	ldr	r3, [pc, #384]	; (80035d8 <HAL_GPIO_Init+0x30c>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	4a5f      	ldr	r2, [pc, #380]	; (80035d8 <HAL_GPIO_Init+0x30c>)
 800345c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003460:	6453      	str	r3, [r2, #68]	; 0x44
 8003462:	4b5d      	ldr	r3, [pc, #372]	; (80035d8 <HAL_GPIO_Init+0x30c>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800346e:	4a5b      	ldr	r2, [pc, #364]	; (80035dc <HAL_GPIO_Init+0x310>)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a52      	ldr	r2, [pc, #328]	; (80035e0 <HAL_GPIO_Init+0x314>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02b      	beq.n	80034f2 <HAL_GPIO_Init+0x226>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a51      	ldr	r2, [pc, #324]	; (80035e4 <HAL_GPIO_Init+0x318>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d025      	beq.n	80034ee <HAL_GPIO_Init+0x222>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a50      	ldr	r2, [pc, #320]	; (80035e8 <HAL_GPIO_Init+0x31c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01f      	beq.n	80034ea <HAL_GPIO_Init+0x21e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4f      	ldr	r2, [pc, #316]	; (80035ec <HAL_GPIO_Init+0x320>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d019      	beq.n	80034e6 <HAL_GPIO_Init+0x21a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4e      	ldr	r2, [pc, #312]	; (80035f0 <HAL_GPIO_Init+0x324>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_GPIO_Init+0x216>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4d      	ldr	r2, [pc, #308]	; (80035f4 <HAL_GPIO_Init+0x328>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00d      	beq.n	80034de <HAL_GPIO_Init+0x212>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4c      	ldr	r2, [pc, #304]	; (80035f8 <HAL_GPIO_Init+0x32c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <HAL_GPIO_Init+0x20e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4b      	ldr	r2, [pc, #300]	; (80035fc <HAL_GPIO_Init+0x330>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_GPIO_Init+0x20a>
 80034d2:	2307      	movs	r3, #7
 80034d4:	e00e      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034d6:	2308      	movs	r3, #8
 80034d8:	e00c      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034da:	2306      	movs	r3, #6
 80034dc:	e00a      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034de:	2305      	movs	r3, #5
 80034e0:	e008      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034e6:	2303      	movs	r3, #3
 80034e8:	e004      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e002      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_GPIO_Init+0x228>
 80034f2:	2300      	movs	r3, #0
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	f002 0203 	and.w	r2, r2, #3
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	4093      	lsls	r3, r2
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003504:	4935      	ldr	r1, [pc, #212]	; (80035dc <HAL_GPIO_Init+0x310>)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	3302      	adds	r3, #2
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003536:	4a32      	ldr	r2, [pc, #200]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800353c:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_GPIO_Init+0x334>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003566:	4b26      	ldr	r3, [pc, #152]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_GPIO_Init+0x334>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_GPIO_Init+0x334>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <HAL_GPIO_Init+0x334>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3301      	adds	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b0f      	cmp	r3, #15
 80035c4:	f67f ae90 	bls.w	80032e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3724      	adds	r7, #36	; 0x24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40013800 	.word	0x40013800
 80035e0:	40020000 	.word	0x40020000
 80035e4:	40020400 	.word	0x40020400
 80035e8:	40020800 	.word	0x40020800
 80035ec:	40020c00 	.word	0x40020c00
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40021400 	.word	0x40021400
 80035f8:	40021800 	.word	0x40021800
 80035fc:	40021c00 	.word	0x40021c00
 8003600:	40013c00 	.word	0x40013c00

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003620:	e003      	b.n	800362a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	619a      	str	r2, [r3, #24]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003648:	887a      	ldrh	r2, [r7, #2]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	041a      	lsls	r2, r3, #16
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43d9      	mvns	r1, r3
 8003654:	887b      	ldrh	r3, [r7, #2]
 8003656:	400b      	ands	r3, r1
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e12b      	b.n	80038d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd fb04 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	; 0x24
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d0:	f000 fd80 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 80036d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4a81      	ldr	r2, [pc, #516]	; (80038e0 <HAL_I2C_Init+0x274>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d807      	bhi.n	80036f0 <HAL_I2C_Init+0x84>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a80      	ldr	r2, [pc, #512]	; (80038e4 <HAL_I2C_Init+0x278>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bf94      	ite	ls
 80036e8:	2301      	movls	r3, #1
 80036ea:	2300      	movhi	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e006      	b.n	80036fe <HAL_I2C_Init+0x92>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a7d      	ldr	r2, [pc, #500]	; (80038e8 <HAL_I2C_Init+0x27c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0e7      	b.n	80038d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a78      	ldr	r2, [pc, #480]	; (80038ec <HAL_I2C_Init+0x280>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	0c9b      	lsrs	r3, r3, #18
 8003710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4a6a      	ldr	r2, [pc, #424]	; (80038e0 <HAL_I2C_Init+0x274>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d802      	bhi.n	8003740 <HAL_I2C_Init+0xd4>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3301      	adds	r3, #1
 800373e:	e009      	b.n	8003754 <HAL_I2C_Init+0xe8>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	4a69      	ldr	r2, [pc, #420]	; (80038f0 <HAL_I2C_Init+0x284>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	3301      	adds	r3, #1
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	495c      	ldr	r1, [pc, #368]	; (80038e0 <HAL_I2C_Init+0x274>)
 8003770:	428b      	cmp	r3, r1
 8003772:	d819      	bhi.n	80037a8 <HAL_I2C_Init+0x13c>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e59      	subs	r1, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003782:	1c59      	adds	r1, r3, #1
 8003784:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003788:	400b      	ands	r3, r1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_I2C_Init+0x138>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e59      	subs	r1, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fbb1 f3f3 	udiv	r3, r1, r3
 800379c:	3301      	adds	r3, #1
 800379e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a2:	e051      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 80037a4:	2304      	movs	r3, #4
 80037a6:	e04f      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d111      	bne.n	80037d4 <HAL_I2C_Init+0x168>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1e58      	subs	r0, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e012      	b.n	80037fa <HAL_I2C_Init+0x18e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e58      	subs	r0, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	0099      	lsls	r1, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Init+0x196>
 80037fe:	2301      	movs	r3, #1
 8003800:	e022      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10e      	bne.n	8003828 <HAL_I2C_Init+0x1bc>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1e58      	subs	r0, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	460b      	mov	r3, r1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	440b      	add	r3, r1
 8003818:	fbb0 f3f3 	udiv	r3, r0, r3
 800381c:	3301      	adds	r3, #1
 800381e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003826:	e00f      	b.n	8003848 <HAL_I2C_Init+0x1dc>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	6809      	ldr	r1, [r1, #0]
 800384c:	4313      	orrs	r3, r2
 800384e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69da      	ldr	r2, [r3, #28]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6911      	ldr	r1, [r2, #16]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	4311      	orrs	r1, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	430b      	orrs	r3, r1
 800388a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	000186a0 	.word	0x000186a0
 80038e4:	001e847f 	.word	0x001e847f
 80038e8:	003d08ff 	.word	0x003d08ff
 80038ec:	431bde83 	.word	0x431bde83
 80038f0:	10624dd3 	.word	0x10624dd3

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e267      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d075      	beq.n	80039fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003912:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d00c      	beq.n	8003938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391e:	4b85      	ldr	r3, [pc, #532]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003926:	2b08      	cmp	r3, #8
 8003928:	d112      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b82      	ldr	r3, [pc, #520]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003936:	d10b      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	4b7e      	ldr	r3, [pc, #504]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d05b      	beq.n	80039fc <HAL_RCC_OscConfig+0x108>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d157      	bne.n	80039fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e242      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d106      	bne.n	8003968 <HAL_RCC_OscConfig+0x74>
 800395a:	4b76      	ldr	r3, [pc, #472]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a75      	ldr	r2, [pc, #468]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e01d      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x98>
 8003972:	4b70      	ldr	r3, [pc, #448]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a6f      	ldr	r2, [pc, #444]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b6d      	ldr	r3, [pc, #436]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6c      	ldr	r2, [pc, #432]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 800398c:	4b69      	ldr	r3, [pc, #420]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a68      	ldr	r2, [pc, #416]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b66      	ldr	r3, [pc, #408]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a65      	ldr	r2, [pc, #404]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fd6e 	bl	800248c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fe fd6a 	bl	800248c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e207      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b5b      	ldr	r3, [pc, #364]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0xc0>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe fd5a 	bl	800248c <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe fd56 	bl	800248c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e1f3      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0xe8>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0a:	4b4a      	ldr	r3, [pc, #296]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b44      	ldr	r3, [pc, #272]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d116      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	4b41      	ldr	r3, [pc, #260]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e1c7      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4937      	ldr	r1, [pc, #220]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	e03a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a64:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_RCC_OscConfig+0x244>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe fd0f 	bl	800248c <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe fd0b 	bl	800248c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1a8      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4925      	ldr	r1, [pc, #148]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
 8003aa4:	e015      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <HAL_RCC_OscConfig+0x244>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fe fcee 	bl	800248c <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fe fcea 	bl	800248c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e187      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d036      	beq.n	8003b4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d016      	beq.n	8003b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <HAL_RCC_OscConfig+0x248>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fe fcce 	bl	800248c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fe fcca 	bl	800248c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e167      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x200>
 8003b12:	e01b      	b.n	8003b4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b14:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_RCC_OscConfig+0x248>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fe fcb7 	bl	800248c <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	e00e      	b.n	8003b40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b22:	f7fe fcb3 	bl	800248c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d907      	bls.n	8003b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e150      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
 8003b34:	40023800 	.word	0x40023800
 8003b38:	42470000 	.word	0x42470000
 8003b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1ea      	bne.n	8003b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8097 	beq.w	8003c88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b81      	ldr	r3, [pc, #516]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10f      	bne.n	8003b8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	4b7d      	ldr	r3, [pc, #500]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a7c      	ldr	r2, [pc, #496]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7a:	4b7a      	ldr	r3, [pc, #488]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b77      	ldr	r3, [pc, #476]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d118      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b96:	4b74      	ldr	r3, [pc, #464]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a73      	ldr	r2, [pc, #460]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba2:	f7fe fc73 	bl	800248c <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003baa:	f7fe fc6f 	bl	800248c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e10c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	4b6a      	ldr	r3, [pc, #424]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x2ea>
 8003bd0:	4b64      	ldr	r3, [pc, #400]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a63      	ldr	r2, [pc, #396]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	e01c      	b.n	8003c18 <HAL_RCC_OscConfig+0x324>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x30c>
 8003be6:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	4a5e      	ldr	r2, [pc, #376]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 0304 	orr.w	r3, r3, #4
 8003bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf2:	4b5c      	ldr	r3, [pc, #368]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a5b      	ldr	r2, [pc, #364]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCC_OscConfig+0x324>
 8003c00:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	4a57      	ldr	r2, [pc, #348]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0c:	4b55      	ldr	r3, [pc, #340]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a54      	ldr	r2, [pc, #336]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c12:	f023 0304 	bic.w	r3, r3, #4
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fe fc34 	bl	800248c <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fe fc30 	bl	800248c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0cb      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ee      	beq.n	8003c28 <HAL_RCC_OscConfig+0x334>
 8003c4a:	e014      	b.n	8003c76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4c:	f7fe fc1e 	bl	800248c <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7fe fc1a 	bl	800248c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e0b5      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6a:	4b3e      	ldr	r3, [pc, #248]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ee      	bne.n	8003c54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b39      	ldr	r3, [pc, #228]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	4a38      	ldr	r2, [pc, #224]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a1 	beq.w	8003dd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c92:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d05c      	beq.n	8003d58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d141      	bne.n	8003d2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe fbee 	bl	800248c <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe fbea 	bl	800248c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e087      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69da      	ldr	r2, [r3, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	019b      	lsls	r3, r3, #6
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	3b01      	subs	r3, #1
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	491b      	ldr	r1, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fe fbc3 	bl	800248c <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fe fbbf 	bl	800248c <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e05c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x416>
 8003d28:	e054      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fe fbac 	bl	800248c <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fe fba8 	bl	800248c <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e045      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x444>
 8003d56:	e03d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e038      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x4ec>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d028      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d121      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d11a      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d111      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	3b01      	subs	r3, #1
 8003dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800

08003de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0cc      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df8:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d90c      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b65      	ldr	r3, [pc, #404]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0e:	4b63      	ldr	r3, [pc, #396]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b8      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d020      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e38:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a58      	ldr	r2, [pc, #352]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e50:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a52      	ldr	r2, [pc, #328]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b50      	ldr	r3, [pc, #320]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	494d      	ldr	r1, [pc, #308]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d044      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d119      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb2:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e067      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec2:	4b37      	ldr	r3, [pc, #220]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4934      	ldr	r1, [pc, #208]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed4:	f7fe fada 	bl	800248c <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003edc:	f7fe fad6 	bl	800248c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e04f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 020c 	and.w	r2, r3, #12
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d1eb      	bne.n	8003edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d20c      	bcs.n	8003f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e032      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f38:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4916      	ldr	r1, [pc, #88]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f6a:	f000 f821 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490a      	ldr	r1, [pc, #40]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fe fa3a 	bl	8002404 <HAL_InitTick>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023c00 	.word	0x40023c00
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	08009ff8 	.word	0x08009ff8
 8003fa8:	20000008 	.word	0x20000008
 8003fac:	20000014 	.word	0x20000014

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b094      	sub	sp, #80	; 0x50
 8003fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	647b      	str	r3, [r7, #68]	; 0x44
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc8:	4b79      	ldr	r3, [pc, #484]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	f200 80e1 	bhi.w	800419c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0x3a>
 8003fe2:	e0db      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe4:	4b73      	ldr	r3, [pc, #460]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fe6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fe8:	e0db      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fea:	4b73      	ldr	r3, [pc, #460]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fee:	e0d8      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff0:	4b6f      	ldr	r3, [pc, #444]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ffa:	4b6d      	ldr	r3, [pc, #436]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d063      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004006:	4b6a      	ldr	r3, [pc, #424]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	099b      	lsrs	r3, r3, #6
 800400c:	2200      	movs	r2, #0
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004010:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004018:	633b      	str	r3, [r7, #48]	; 0x30
 800401a:	2300      	movs	r3, #0
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
 800401e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004022:	4622      	mov	r2, r4
 8004024:	462b      	mov	r3, r5
 8004026:	f04f 0000 	mov.w	r0, #0
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	0159      	lsls	r1, r3, #5
 8004030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004034:	0150      	lsls	r0, r2, #5
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4621      	mov	r1, r4
 800403c:	1a51      	subs	r1, r2, r1
 800403e:	6139      	str	r1, [r7, #16]
 8004040:	4629      	mov	r1, r5
 8004042:	eb63 0301 	sbc.w	r3, r3, r1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004054:	4659      	mov	r1, fp
 8004056:	018b      	lsls	r3, r1, #6
 8004058:	4651      	mov	r1, sl
 800405a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800405e:	4651      	mov	r1, sl
 8004060:	018a      	lsls	r2, r1, #6
 8004062:	4651      	mov	r1, sl
 8004064:	ebb2 0801 	subs.w	r8, r2, r1
 8004068:	4659      	mov	r1, fp
 800406a:	eb63 0901 	sbc.w	r9, r3, r1
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800407e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004082:	4690      	mov	r8, r2
 8004084:	4699      	mov	r9, r3
 8004086:	4623      	mov	r3, r4
 8004088:	eb18 0303 	adds.w	r3, r8, r3
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	462b      	mov	r3, r5
 8004090:	eb49 0303 	adc.w	r3, r9, r3
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040a2:	4629      	mov	r1, r5
 80040a4:	024b      	lsls	r3, r1, #9
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040ac:	4621      	mov	r1, r4
 80040ae:	024a      	lsls	r2, r1, #9
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b6:	2200      	movs	r2, #0
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040c0:	f7fc f882 	bl	80001c8 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040cc:	e058      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ce:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	099b      	lsrs	r3, r3, #6
 80040d4:	2200      	movs	r2, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	4611      	mov	r1, r2
 80040da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040de:	623b      	str	r3, [r7, #32]
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
 80040e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	f04f 0000 	mov.w	r0, #0
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	0159      	lsls	r1, r3, #5
 80040f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040fa:	0150      	lsls	r0, r2, #5
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4641      	mov	r1, r8
 8004102:	ebb2 0a01 	subs.w	sl, r2, r1
 8004106:	4649      	mov	r1, r9
 8004108:	eb63 0b01 	sbc.w	fp, r3, r1
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004118:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800411c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004120:	ebb2 040a 	subs.w	r4, r2, sl
 8004124:	eb63 050b 	sbc.w	r5, r3, fp
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	00eb      	lsls	r3, r5, #3
 8004132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004136:	00e2      	lsls	r2, r4, #3
 8004138:	4614      	mov	r4, r2
 800413a:	461d      	mov	r5, r3
 800413c:	4643      	mov	r3, r8
 800413e:	18e3      	adds	r3, r4, r3
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	464b      	mov	r3, r9
 8004144:	eb45 0303 	adc.w	r3, r5, r3
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004156:	4629      	mov	r1, r5
 8004158:	028b      	lsls	r3, r1, #10
 800415a:	4621      	mov	r1, r4
 800415c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004160:	4621      	mov	r1, r4
 8004162:	028a      	lsls	r2, r1, #10
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800416a:	2200      	movs	r2, #0
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	61fa      	str	r2, [r7, #28]
 8004170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004174:	f7fc f828 	bl	80001c8 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4613      	mov	r3, r2
 800417e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	3301      	adds	r3, #1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800419a:	e002      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800419e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3750      	adds	r7, #80	; 0x50
 80041a8:	46bd      	mov	sp, r7
 80041aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	00f42400 	.word	0x00f42400
 80041b8:	007a1200 	.word	0x007a1200

080041bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000008 	.word	0x20000008

080041d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041d8:	f7ff fff0 	bl	80041bc <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	0a9b      	lsrs	r3, r3, #10
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4903      	ldr	r1, [pc, #12]	; (80041f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	0800a008 	.word	0x0800a008

080041fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004200:	f7ff ffdc 	bl	80041bc <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	0b5b      	lsrs	r3, r3, #13
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4903      	ldr	r1, [pc, #12]	; (8004220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40023800 	.word	0x40023800
 8004220:	0800a008 	.word	0x0800a008

08004224 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e07b      	b.n	800432e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2b00      	cmp	r3, #0
 800423c:	d108      	bne.n	8004250 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004246:	d009      	beq.n	800425c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	61da      	str	r2, [r3, #28]
 800424e:	e005      	b.n	800425c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd fb24 	bl	80018c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e0:	ea42 0103 	orr.w	r1, r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	f003 0104 	and.w	r1, r3, #4
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f003 0210 	and.w	r2, r3, #16
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b088      	sub	sp, #32
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_SPI_Transmit+0x22>
 8004354:	2302      	movs	r3, #2
 8004356:	e126      	b.n	80045a6 <HAL_SPI_Transmit+0x270>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004360:	f7fe f894 	bl	800248c <HAL_GetTick>
 8004364:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d002      	beq.n	800437c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004376:	2302      	movs	r3, #2
 8004378:	77fb      	strb	r3, [r7, #31]
    goto error;
 800437a:	e10b      	b.n	8004594 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_SPI_Transmit+0x52>
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800438c:	e102      	b.n	8004594 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2203      	movs	r2, #3
 8004392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d4:	d10f      	bne.n	80043f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d007      	beq.n	8004414 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800441c:	d14b      	bne.n	80044b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_SPI_Transmit+0xf6>
 8004426:	8afb      	ldrh	r3, [r7, #22]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d13e      	bne.n	80044aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	881a      	ldrh	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	1c9a      	adds	r2, r3, #2
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004450:	e02b      	b.n	80044aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b02      	cmp	r3, #2
 800445e:	d112      	bne.n	8004486 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	881a      	ldrh	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	1c9a      	adds	r2, r3, #2
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	86da      	strh	r2, [r3, #54]	; 0x36
 8004484:	e011      	b.n	80044aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004486:	f7fe f801 	bl	800248c <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d803      	bhi.n	800449e <HAL_SPI_Transmit+0x168>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d102      	bne.n	80044a4 <HAL_SPI_Transmit+0x16e>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044a8:	e074      	b.n	8004594 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1ce      	bne.n	8004452 <HAL_SPI_Transmit+0x11c>
 80044b4:	e04c      	b.n	8004550 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_SPI_Transmit+0x18e>
 80044be:	8afb      	ldrh	r3, [r7, #22]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d140      	bne.n	8004546 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	330c      	adds	r3, #12
 80044ce:	7812      	ldrb	r2, [r2, #0]
 80044d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044ea:	e02c      	b.n	8004546 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d113      	bne.n	8004522 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004520:	e011      	b.n	8004546 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004522:	f7fd ffb3 	bl	800248c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d803      	bhi.n	800453a <HAL_SPI_Transmit+0x204>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d102      	bne.n	8004540 <HAL_SPI_Transmit+0x20a>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004544:	e026      	b.n	8004594 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1cd      	bne.n	80044ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	6839      	ldr	r1, [r7, #0]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fbcb 	bl	8004cf0 <SPI_EndRxTxTransaction>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e000      	b.n	8004594 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004592:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b088      	sub	sp, #32
 80045b2:	af02      	add	r7, sp, #8
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ca:	d112      	bne.n	80045f2 <HAL_SPI_Receive+0x44>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10e      	bne.n	80045f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2204      	movs	r2, #4
 80045d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045dc:	88fa      	ldrh	r2, [r7, #6]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f8f1 	bl	80047d0 <HAL_SPI_TransmitReceive>
 80045ee:	4603      	mov	r3, r0
 80045f0:	e0ea      	b.n	80047c8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_SPI_Receive+0x52>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e0e3      	b.n	80047c8 <HAL_SPI_Receive+0x21a>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004608:	f7fd ff40 	bl	800248c <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b01      	cmp	r3, #1
 8004618:	d002      	beq.n	8004620 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800461a:	2302      	movs	r3, #2
 800461c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800461e:	e0ca      	b.n	80047b6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_SPI_Receive+0x7e>
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d102      	bne.n	8004632 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004630:	e0c1      	b.n	80047b6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2204      	movs	r2, #4
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	88fa      	ldrh	r2, [r7, #6]
 800464a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	88fa      	ldrh	r2, [r7, #6]
 8004650:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004678:	d10f      	bne.n	800469a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004688:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004698:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d007      	beq.n	80046b8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d162      	bne.n	8004786 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046c0:	e02e      	b.n	8004720 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d115      	bne.n	80046fc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f103 020c 	add.w	r2, r3, #12
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	7812      	ldrb	r2, [r2, #0]
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046fa:	e011      	b.n	8004720 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046fc:	f7fd fec6 	bl	800248c <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d803      	bhi.n	8004714 <HAL_SPI_Receive+0x166>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004712:	d102      	bne.n	800471a <HAL_SPI_Receive+0x16c>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800471e:	e04a      	b.n	80047b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1cb      	bne.n	80046c2 <HAL_SPI_Receive+0x114>
 800472a:	e031      	b.n	8004790 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d113      	bne.n	8004762 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	b292      	uxth	r2, r2
 8004746:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	1c9a      	adds	r2, r3, #2
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004760:	e011      	b.n	8004786 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004762:	f7fd fe93 	bl	800248c <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d803      	bhi.n	800477a <HAL_SPI_Receive+0x1cc>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d102      	bne.n	8004780 <HAL_SPI_Receive+0x1d2>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004784:	e017      	b.n	80047b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1cd      	bne.n	800472c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	6839      	ldr	r1, [r7, #0]
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fa45 	bl	8004c24 <SPI_EndRxTransaction>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	75fb      	strb	r3, [r7, #23]
 80047b2:	e000      	b.n	80047b6 <HAL_SPI_Receive+0x208>
  }

error :
 80047b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08c      	sub	sp, #48	; 0x30
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047de:	2301      	movs	r3, #1
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x26>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e18a      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x33c>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047fe:	f7fd fe45 	bl	800248c <HAL_GetTick>
 8004802:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004814:	887b      	ldrh	r3, [r7, #2]
 8004816:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800481c:	2b01      	cmp	r3, #1
 800481e:	d00f      	beq.n	8004840 <HAL_SPI_TransmitReceive+0x70>
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004826:	d107      	bne.n	8004838 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d103      	bne.n	8004838 <HAL_SPI_TransmitReceive+0x68>
 8004830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004834:	2b04      	cmp	r3, #4
 8004836:	d003      	beq.n	8004840 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004838:	2302      	movs	r3, #2
 800483a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800483e:	e15b      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x82>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x82>
 800484c:	887b      	ldrh	r3, [r7, #2]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d103      	bne.n	800485a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004858:	e14e      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b04      	cmp	r3, #4
 8004864:	d003      	beq.n	800486e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2205      	movs	r2, #5
 800486a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	887a      	ldrh	r2, [r7, #2]
 800487e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	887a      	ldrh	r2, [r7, #2]
 8004896:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d007      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ca:	d178      	bne.n	80049be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_SPI_TransmitReceive+0x10a>
 80048d4:	8b7b      	ldrh	r3, [r7, #26]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d166      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	881a      	ldrh	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	1c9a      	adds	r2, r3, #2
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048fe:	e053      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b02      	cmp	r3, #2
 800490c:	d11b      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x176>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d016      	beq.n	8004946 <HAL_SPI_TransmitReceive+0x176>
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	2b01      	cmp	r3, #1
 800491c:	d113      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	881a      	ldrh	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	1c9a      	adds	r2, r3, #2
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d119      	bne.n	8004988 <HAL_SPI_TransmitReceive+0x1b8>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d014      	beq.n	8004988 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	b292      	uxth	r2, r2
 800496a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	1c9a      	adds	r2, r3, #2
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004984:	2301      	movs	r3, #1
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004988:	f7fd fd80 	bl	800248c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004994:	429a      	cmp	r2, r3
 8004996:	d807      	bhi.n	80049a8 <HAL_SPI_TransmitReceive+0x1d8>
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d003      	beq.n	80049a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049a6:	e0a7      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1a6      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x130>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1a1      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x130>
 80049bc:	e07c      	b.n	8004ab8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_SPI_TransmitReceive+0x1fc>
 80049c6:	8b7b      	ldrh	r3, [r7, #26]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d16b      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	330c      	adds	r3, #12
 80049d6:	7812      	ldrb	r2, [r2, #0]
 80049d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049f2:	e057      	b.n	8004aa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d11c      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x26c>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d017      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x26c>
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d114      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	7812      	ldrb	r2, [r2, #0]
 8004a1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d119      	bne.n	8004a7e <HAL_SPI_TransmitReceive+0x2ae>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d014      	beq.n	8004a7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a7e:	f7fd fd05 	bl	800248c <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d803      	bhi.n	8004a96 <HAL_SPI_TransmitReceive+0x2c6>
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d102      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x2cc>
 8004a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d103      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004aa2:	e029      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1a2      	bne.n	80049f4 <HAL_SPI_TransmitReceive+0x224>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d19d      	bne.n	80049f4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f917 	bl	8004cf0 <SPI_EndRxTxTransaction>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d006      	beq.n	8004ad6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ad4:	e010      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10b      	bne.n	8004af6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	e000      	b.n	8004af8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004af6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3730      	adds	r7, #48	; 0x30
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b24:	f7fd fcb2 	bl	800248c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	4413      	add	r3, r2
 8004b32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b34:	f7fd fcaa 	bl	800248c <HAL_GetTick>
 8004b38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b3a:	4b39      	ldr	r3, [pc, #228]	; (8004c20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	015b      	lsls	r3, r3, #5
 8004b40:	0d1b      	lsrs	r3, r3, #20
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4a:	e054      	b.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d050      	beq.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b54:	f7fd fc9a 	bl	800248c <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d902      	bls.n	8004b6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d13d      	bne.n	8004be6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b82:	d111      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8c:	d004      	beq.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b96:	d107      	bne.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb0:	d10f      	bne.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e017      	b.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d19b      	bne.n	8004b4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000008 	.word	0x20000008

08004c24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c38:	d111      	bne.n	8004c5e <SPI_EndRxTransaction+0x3a>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c42:	d004      	beq.n	8004c4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4c:	d107      	bne.n	8004c5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c66:	d12a      	bne.n	8004cbe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d012      	beq.n	8004c98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2180      	movs	r1, #128	; 0x80
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff ff49 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d02d      	beq.n	8004ce4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e026      	b.n	8004ce6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff ff36 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01a      	beq.n	8004ce4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb2:	f043 0220 	orr.w	r2, r3, #32
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e013      	b.n	8004ce6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff ff23 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e000      	b.n	8004ce6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cfc:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <SPI_EndRxTxTransaction+0x7c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <SPI_EndRxTxTransaction+0x80>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	0d5b      	lsrs	r3, r3, #21
 8004d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d1a:	d112      	bne.n	8004d42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2200      	movs	r2, #0
 8004d24:	2180      	movs	r1, #128	; 0x80
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff fef4 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d016      	beq.n	8004d60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f043 0220 	orr.w	r2, r3, #32
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e00f      	b.n	8004d62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b80      	cmp	r3, #128	; 0x80
 8004d5a:	d0f2      	beq.n	8004d42 <SPI_EndRxTxTransaction+0x52>
 8004d5c:	e000      	b.n	8004d60 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d5e:	bf00      	nop
  }

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000008 	.word	0x20000008
 8004d70:	165e9f81 	.word	0x165e9f81

08004d74 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e034      	b.n	8004df4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7fb fe0c 	bl	80009bc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3308      	adds	r3, #8
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f002 f84e 	bl	8006e50 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	f002 f898 	bl	8006ef4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6858      	ldr	r0, [r3, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	f002 f8cd 	bl	8006f70 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	6892      	ldr	r2, [r2, #8]
 8004dde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	6892      	ldr	r2, [r2, #8]
 8004dea:	f041 0101 	orr.w	r1, r1, #1
 8004dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e041      	b.n	8004e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc ff16 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f000 fc1a 	bl	8005674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e046      	b.n	8004f42 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <HAL_TIM_Base_Start+0xb4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d022      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ece:	d01d      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <HAL_TIM_Base_Start+0xb8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d018      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1e      	ldr	r2, [pc, #120]	; (8004f58 <HAL_TIM_Base_Start+0xbc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <HAL_TIM_Base_Start+0xc0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00e      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <HAL_TIM_Base_Start+0xc4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <HAL_TIM_Base_Start+0xc8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_TIM_Base_Start+0xcc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d111      	bne.n	8004f30 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b06      	cmp	r3, #6
 8004f1c:	d010      	beq.n	8004f40 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2e:	e007      	b.n	8004f40 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40010400 	.word	0x40010400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	40001800 	.word	0x40001800

08004f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d001      	beq.n	8004f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e04e      	b.n	8005022 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a23      	ldr	r2, [pc, #140]	; (8005030 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d022      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fae:	d01d      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1f      	ldr	r2, [pc, #124]	; (8005034 <HAL_TIM_Base_Start_IT+0xc8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d018      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d013      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1c      	ldr	r2, [pc, #112]	; (800503c <HAL_TIM_Base_Start_IT+0xd0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00e      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d009      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a19      	ldr	r2, [pc, #100]	; (8005044 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a18      	ldr	r2, [pc, #96]	; (8005048 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d111      	bne.n	8005010 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b06      	cmp	r3, #6
 8004ffc:	d010      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0201 	orr.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500e:	e007      	b.n	8005020 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40010000 	.word	0x40010000
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00
 8005040:	40010400 	.word	0x40010400
 8005044:	40014000 	.word	0x40014000
 8005048:	40001800 	.word	0x40001800

0800504c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e041      	b.n	80050e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f839 	bl	80050ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f000 faf2 	bl	8005674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b02      	cmp	r3, #2
 8005112:	d122      	bne.n	800515a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b02      	cmp	r3, #2
 8005120:	d11b      	bne.n	800515a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f06f 0202 	mvn.w	r2, #2
 800512a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fa78 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 8005146:	e005      	b.n	8005154 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fa6a 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fa7b 	bl	800564a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b04      	cmp	r3, #4
 8005166:	d122      	bne.n	80051ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b04      	cmp	r3, #4
 8005174:	d11b      	bne.n	80051ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f06f 0204 	mvn.w	r2, #4
 800517e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa4e 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 800519a:	e005      	b.n	80051a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fa40 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fa51 	bl	800564a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d122      	bne.n	8005202 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d11b      	bne.n	8005202 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f06f 0208 	mvn.w	r2, #8
 80051d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2204      	movs	r2, #4
 80051d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fa24 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 80051ee:	e005      	b.n	80051fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fa16 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa27 	bl	800564a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b10      	cmp	r3, #16
 800520e:	d122      	bne.n	8005256 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b10      	cmp	r3, #16
 800521c:	d11b      	bne.n	8005256 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f06f 0210 	mvn.w	r2, #16
 8005226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2208      	movs	r2, #8
 800522c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f9fa 	bl	8005636 <HAL_TIM_IC_CaptureCallback>
 8005242:	e005      	b.n	8005250 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f9ec 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9fd 	bl	800564a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b01      	cmp	r3, #1
 8005262:	d10e      	bne.n	8005282 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b01      	cmp	r3, #1
 8005270:	d107      	bne.n	8005282 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f06f 0201 	mvn.w	r2, #1
 800527a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fc fac1 	bl	8001804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528c:	2b80      	cmp	r3, #128	; 0x80
 800528e:	d10e      	bne.n	80052ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529a:	2b80      	cmp	r3, #128	; 0x80
 800529c:	d107      	bne.n	80052ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fd53 	bl	8005d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b40      	cmp	r3, #64	; 0x40
 80052ba:	d10e      	bne.n	80052da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c6:	2b40      	cmp	r3, #64	; 0x40
 80052c8:	d107      	bne.n	80052da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f9c2 	bl	800565e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d10e      	bne.n	8005306 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	d107      	bne.n	8005306 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f06f 0220 	mvn.w	r2, #32
 80052fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fd1d 	bl	8005d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800532a:	2302      	movs	r3, #2
 800532c:	e0ae      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b0c      	cmp	r3, #12
 800533a:	f200 809f 	bhi.w	800547c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005379 	.word	0x08005379
 8005348:	0800547d 	.word	0x0800547d
 800534c:	0800547d 	.word	0x0800547d
 8005350:	0800547d 	.word	0x0800547d
 8005354:	080053b9 	.word	0x080053b9
 8005358:	0800547d 	.word	0x0800547d
 800535c:	0800547d 	.word	0x0800547d
 8005360:	0800547d 	.word	0x0800547d
 8005364:	080053fb 	.word	0x080053fb
 8005368:	0800547d 	.word	0x0800547d
 800536c:	0800547d 	.word	0x0800547d
 8005370:	0800547d 	.word	0x0800547d
 8005374:	0800543b 	.word	0x0800543b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fa18 	bl	80057b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0208 	orr.w	r2, r2, #8
 8005392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0204 	bic.w	r2, r2, #4
 80053a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6999      	ldr	r1, [r3, #24]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	619a      	str	r2, [r3, #24]
      break;
 80053b6:	e064      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fa68 	bl	8005894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6999      	ldr	r1, [r3, #24]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	021a      	lsls	r2, r3, #8
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	619a      	str	r2, [r3, #24]
      break;
 80053f8:	e043      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fabd 	bl	8005980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0208 	orr.w	r2, r2, #8
 8005414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0204 	bic.w	r2, r2, #4
 8005424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69d9      	ldr	r1, [r3, #28]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	61da      	str	r2, [r3, #28]
      break;
 8005438:	e023      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fb11 	bl	8005a68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69d9      	ldr	r1, [r3, #28]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	021a      	lsls	r2, r3, #8
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	61da      	str	r2, [r3, #28]
      break;
 800547a:	e002      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
      break;
 8005480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800548a:	7dfb      	ldrb	r3, [r7, #23]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIM_ConfigClockSource+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e0b4      	b.n	800561a <HAL_TIM_ConfigClockSource+0x186>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e8:	d03e      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0xd4>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ee:	f200 8087 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	f000 8086 	beq.w	8005606 <HAL_TIM_ConfigClockSource+0x172>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d87f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005500:	2b70      	cmp	r3, #112	; 0x70
 8005502:	d01a      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xa6>
 8005504:	2b70      	cmp	r3, #112	; 0x70
 8005506:	d87b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005508:	2b60      	cmp	r3, #96	; 0x60
 800550a:	d050      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x11a>
 800550c:	2b60      	cmp	r3, #96	; 0x60
 800550e:	d877      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005510:	2b50      	cmp	r3, #80	; 0x50
 8005512:	d03c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0xfa>
 8005514:	2b50      	cmp	r3, #80	; 0x50
 8005516:	d873      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d058      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x13a>
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d86f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b30      	cmp	r3, #48	; 0x30
 8005522:	d064      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005524:	2b30      	cmp	r3, #48	; 0x30
 8005526:	d86b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b20      	cmp	r3, #32
 800552a:	d060      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d867      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d05c      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005534:	2b10      	cmp	r3, #16
 8005536:	d05a      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	e062      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6899      	ldr	r1, [r3, #8]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f000 fb5d 	bl	8005c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800555c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	609a      	str	r2, [r3, #8]
      break;
 8005566:	e04f      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6899      	ldr	r1, [r3, #8]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f000 fb46 	bl	8005c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800558a:	609a      	str	r2, [r3, #8]
      break;
 800558c:	e03c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	461a      	mov	r2, r3
 800559c:	f000 faba 	bl	8005b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2150      	movs	r1, #80	; 0x50
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fb13 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 80055ac:	e02c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 fad9 	bl	8005b72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2160      	movs	r1, #96	; 0x60
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fb03 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e01c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 fa9a 	bl	8005b14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2140      	movs	r1, #64	; 0x40
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 faf3 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e00c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f000 faea 	bl	8005bd2 <TIM_ITRx_SetConfig>
      break;
 80055fe:	e003      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
      break;
 8005604:	e000      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a40      	ldr	r2, [pc, #256]	; (8005788 <TIM_Base_SetConfig+0x114>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005692:	d00f      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3d      	ldr	r2, [pc, #244]	; (800578c <TIM_Base_SetConfig+0x118>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00b      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3c      	ldr	r2, [pc, #240]	; (8005790 <TIM_Base_SetConfig+0x11c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3b      	ldr	r2, [pc, #236]	; (8005794 <TIM_Base_SetConfig+0x120>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3a      	ldr	r2, [pc, #232]	; (8005798 <TIM_Base_SetConfig+0x124>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d108      	bne.n	80056c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2f      	ldr	r2, [pc, #188]	; (8005788 <TIM_Base_SetConfig+0x114>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d02b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d4:	d027      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2c      	ldr	r2, [pc, #176]	; (800578c <TIM_Base_SetConfig+0x118>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d023      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2b      	ldr	r2, [pc, #172]	; (8005790 <TIM_Base_SetConfig+0x11c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01f      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <TIM_Base_SetConfig+0x120>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a29      	ldr	r2, [pc, #164]	; (8005798 <TIM_Base_SetConfig+0x124>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d017      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a28      	ldr	r2, [pc, #160]	; (800579c <TIM_Base_SetConfig+0x128>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a27      	ldr	r2, [pc, #156]	; (80057a0 <TIM_Base_SetConfig+0x12c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00f      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a26      	ldr	r2, [pc, #152]	; (80057a4 <TIM_Base_SetConfig+0x130>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a25      	ldr	r2, [pc, #148]	; (80057a8 <TIM_Base_SetConfig+0x134>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a24      	ldr	r2, [pc, #144]	; (80057ac <TIM_Base_SetConfig+0x138>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a23      	ldr	r2, [pc, #140]	; (80057b0 <TIM_Base_SetConfig+0x13c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d108      	bne.n	8005738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a0a      	ldr	r2, [pc, #40]	; (8005788 <TIM_Base_SetConfig+0x114>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_Base_SetConfig+0xf8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0c      	ldr	r2, [pc, #48]	; (8005798 <TIM_Base_SetConfig+0x124>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d103      	bne.n	8005774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	615a      	str	r2, [r3, #20]
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40010000 	.word	0x40010000
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	40010400 	.word	0x40010400
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800
 80057a8:	40001800 	.word	0x40001800
 80057ac:	40001c00 	.word	0x40001c00
 80057b0:	40002000 	.word	0x40002000

080057b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f023 0201 	bic.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0303 	bic.w	r3, r3, #3
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 0302 	bic.w	r3, r3, #2
 80057fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a20      	ldr	r2, [pc, #128]	; (800588c <TIM_OC1_SetConfig+0xd8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC1_SetConfig+0x64>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a1f      	ldr	r2, [pc, #124]	; (8005890 <TIM_OC1_SetConfig+0xdc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d10c      	bne.n	8005832 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0308 	bic.w	r3, r3, #8
 800581e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f023 0304 	bic.w	r3, r3, #4
 8005830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a15      	ldr	r2, [pc, #84]	; (800588c <TIM_OC1_SetConfig+0xd8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <TIM_OC1_SetConfig+0x8e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a14      	ldr	r2, [pc, #80]	; (8005890 <TIM_OC1_SetConfig+0xdc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d111      	bne.n	8005866 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	621a      	str	r2, [r3, #32]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	40010000 	.word	0x40010000
 8005890:	40010400 	.word	0x40010400

08005894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f023 0210 	bic.w	r2, r3, #16
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0320 	bic.w	r3, r3, #32
 80058de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a22      	ldr	r2, [pc, #136]	; (8005978 <TIM_OC2_SetConfig+0xe4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_OC2_SetConfig+0x68>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a21      	ldr	r2, [pc, #132]	; (800597c <TIM_OC2_SetConfig+0xe8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d10d      	bne.n	8005918 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005916:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a17      	ldr	r2, [pc, #92]	; (8005978 <TIM_OC2_SetConfig+0xe4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_OC2_SetConfig+0x94>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a16      	ldr	r2, [pc, #88]	; (800597c <TIM_OC2_SetConfig+0xe8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d113      	bne.n	8005950 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800592e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40010400 	.word	0x40010400

08005980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a21      	ldr	r2, [pc, #132]	; (8005a60 <TIM_OC3_SetConfig+0xe0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_OC3_SetConfig+0x66>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a20      	ldr	r2, [pc, #128]	; (8005a64 <TIM_OC3_SetConfig+0xe4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d10d      	bne.n	8005a02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <TIM_OC3_SetConfig+0xe0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_OC3_SetConfig+0x92>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <TIM_OC3_SetConfig+0xe4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d113      	bne.n	8005a3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	621a      	str	r2, [r3, #32]
}
 8005a54:	bf00      	nop
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40010400 	.word	0x40010400

08005a68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	031b      	lsls	r3, r3, #12
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a12      	ldr	r2, [pc, #72]	; (8005b0c <TIM_OC4_SetConfig+0xa4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC4_SetConfig+0x68>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <TIM_OC4_SetConfig+0xa8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d109      	bne.n	8005ae4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	019b      	lsls	r3, r3, #6
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40010400 	.word	0x40010400

08005b14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f023 030a 	bic.w	r3, r3, #10
 8005b50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b087      	sub	sp, #28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0210 	bic.w	r2, r3, #16
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	031b      	lsls	r3, r3, #12
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f043 0307 	orr.w	r3, r3, #7
 8005bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	609a      	str	r2, [r3, #8]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	021a      	lsls	r2, r3, #8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	609a      	str	r2, [r3, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e05a      	b.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a21      	ldr	r2, [pc, #132]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d022      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cac:	d01d      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d018      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	; (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1a      	ldr	r2, [pc, #104]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00e      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d009      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d10c      	bne.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40010400 	.word	0x40010400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40001800 	.word	0x40001800

08005d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e03f      	b.n	8005dfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fc fa20 	bl	80021d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2224      	movs	r2, #36	; 0x24
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fddb 	bl	8006968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b08a      	sub	sp, #40	; 0x28
 8005e06:	af02      	add	r7, sp, #8
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	603b      	str	r3, [r7, #0]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d17c      	bne.n	8005f1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <HAL_UART_Transmit+0x2c>
 8005e28:	88fb      	ldrh	r3, [r7, #6]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e075      	b.n	8005f1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_UART_Transmit+0x3e>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e06e      	b.n	8005f1e <HAL_UART_Transmit+0x11c>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2221      	movs	r2, #33	; 0x21
 8005e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e56:	f7fc fb19 	bl	800248c <HAL_GetTick>
 8005e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	88fa      	ldrh	r2, [r7, #6]
 8005e66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e70:	d108      	bne.n	8005e84 <HAL_UART_Transmit+0x82>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d104      	bne.n	8005e84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	e003      	b.n	8005e8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e94:	e02a      	b.n	8005eec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2180      	movs	r1, #128	; 0x80
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fb1f 	bl	80064e4 <UART_WaitOnFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e036      	b.n	8005f1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	3302      	adds	r3, #2
 8005eca:	61bb      	str	r3, [r7, #24]
 8005ecc:	e007      	b.n	8005ede <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	781a      	ldrb	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	3301      	adds	r3, #1
 8005edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1cf      	bne.n	8005e96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2140      	movs	r1, #64	; 0x40
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 faef 	bl	80064e4 <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e006      	b.n	8005f1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e000      	b.n	8005f1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f1c:	2302      	movs	r3, #2
  }
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	4613      	mov	r3, r2
 8005f32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d11d      	bne.n	8005f7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <HAL_UART_Receive_IT+0x26>
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e016      	b.n	8005f7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <HAL_UART_Receive_IT+0x38>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e00f      	b.n	8005f7e <HAL_UART_Receive_IT+0x58>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f6c:	88fb      	ldrh	r3, [r7, #6]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 fb24 	bl	80065c0 <UART_Start_Receive_IT>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	e000      	b.n	8005f7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f7c:	2302      	movs	r3, #2
  }
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b0ba      	sub	sp, #232	; 0xe8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10f      	bne.n	8005fee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <HAL_UART_IRQHandler+0x66>
 8005fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fc03 	bl	80067f2 <UART_Receive_IT>
      return;
 8005fec:	e256      	b.n	800649c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80de 	beq.w	80061b4 <HAL_UART_IRQHandler+0x22c>
 8005ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d106      	bne.n	8006012 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006008:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80d1 	beq.w	80061b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <HAL_UART_IRQHandler+0xae>
 800601e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f043 0201 	orr.w	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00b      	beq.n	800605a <HAL_UART_IRQHandler+0xd2>
 8006042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f043 0202 	orr.w	r2, r3, #2
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800605a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <HAL_UART_IRQHandler+0xf6>
 8006066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f043 0204 	orr.w	r2, r3, #4
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800607e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d011      	beq.n	80060ae <HAL_UART_IRQHandler+0x126>
 800608a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d105      	bne.n	80060a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f043 0208 	orr.w	r2, r3, #8
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 81ed 	beq.w	8006492 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <HAL_UART_IRQHandler+0x14e>
 80060c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fb8e 	bl	80067f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e0:	2b40      	cmp	r3, #64	; 0x40
 80060e2:	bf0c      	ite	eq
 80060e4:	2301      	moveq	r3, #1
 80060e6:	2300      	movne	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d103      	bne.n	8006102 <HAL_UART_IRQHandler+0x17a>
 80060fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d04f      	beq.n	80061a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fa96 	bl	8006634 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d141      	bne.n	800619a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3314      	adds	r3, #20
 800611c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800612c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3314      	adds	r3, #20
 800613e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006142:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800614e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800615a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1d9      	bne.n	8006116 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	2b00      	cmp	r3, #0
 8006168:	d013      	beq.n	8006192 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	4a7d      	ldr	r2, [pc, #500]	; (8006364 <HAL_UART_IRQHandler+0x3dc>)
 8006170:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	4618      	mov	r0, r3
 8006178:	f7fc fe4a 	bl	8002e10 <HAL_DMA_Abort_IT>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d016      	beq.n	80061b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800618c:	4610      	mov	r0, r2
 800618e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006190:	e00e      	b.n	80061b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f990 	bl	80064b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006198:	e00a      	b.n	80061b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f98c 	bl	80064b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a0:	e006      	b.n	80061b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f988 	bl	80064b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80061ae:	e170      	b.n	8006492 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	bf00      	nop
    return;
 80061b2:	e16e      	b.n	8006492 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	f040 814a 	bne.w	8006452 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 8143 	beq.w	8006452 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 813c 	beq.w	8006452 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061da:	2300      	movs	r3, #0
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	f040 80b4 	bne.w	8006368 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800620c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8140 	beq.w	8006496 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800621a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800621e:	429a      	cmp	r2, r3
 8006220:	f080 8139 	bcs.w	8006496 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800622a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006236:	f000 8088 	beq.w	800634a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	330c      	adds	r3, #12
 8006240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006266:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800626a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006272:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800627e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1d9      	bne.n	800623a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3314      	adds	r3, #20
 800628c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006298:	f023 0301 	bic.w	r3, r3, #1
 800629c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3314      	adds	r3, #20
 80062a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e1      	bne.n	8006286 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3314      	adds	r3, #20
 80062c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3314      	adds	r3, #20
 80062e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e3      	bne.n	80062c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	330c      	adds	r3, #12
 800630e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800631a:	f023 0310 	bic.w	r3, r3, #16
 800631e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800632c:	65ba      	str	r2, [r7, #88]	; 0x58
 800632e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006332:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800633a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e3      	bne.n	8006308 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	4618      	mov	r0, r3
 8006346:	f7fc fcf3 	bl	8002d30 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006352:	b29b      	uxth	r3, r3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	b29b      	uxth	r3, r3
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f8b6 	bl	80064cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006360:	e099      	b.n	8006496 <HAL_UART_IRQHandler+0x50e>
 8006362:	bf00      	nop
 8006364:	080066fb 	.word	0x080066fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006370:	b29b      	uxth	r3, r3
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 808b 	beq.w	800649a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 8086 	beq.w	800649a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063b2:	647a      	str	r2, [r7, #68]	; 0x44
 80063b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e3      	bne.n	800638e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3314      	adds	r3, #20
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	623b      	str	r3, [r7, #32]
   return(result);
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3314      	adds	r3, #20
 80063e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063ea:	633a      	str	r2, [r7, #48]	; 0x30
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e3      	bne.n	80063c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	60fb      	str	r3, [r7, #12]
   return(result);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0310 	bic.w	r3, r3, #16
 8006422:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006430:	61fa      	str	r2, [r7, #28]
 8006432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	69b9      	ldr	r1, [r7, #24]
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	617b      	str	r3, [r7, #20]
   return(result);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e3      	bne.n	800640c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f83e 	bl	80064cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006450:	e023      	b.n	800649a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <HAL_UART_IRQHandler+0x4ea>
 800645e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f959 	bl	8006722 <UART_Transmit_IT>
    return;
 8006470:	e014      	b.n	800649c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00e      	beq.n	800649c <HAL_UART_IRQHandler+0x514>
 800647e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d008      	beq.n	800649c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f999 	bl	80067c2 <UART_EndTransmit_IT>
    return;
 8006490:	e004      	b.n	800649c <HAL_UART_IRQHandler+0x514>
    return;
 8006492:	bf00      	nop
 8006494:	e002      	b.n	800649c <HAL_UART_IRQHandler+0x514>
      return;
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <HAL_UART_IRQHandler+0x514>
      return;
 800649a:	bf00      	nop
  }
}
 800649c:	37e8      	adds	r7, #232	; 0xe8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop

080064a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b090      	sub	sp, #64	; 0x40
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f4:	e050      	b.n	8006598 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d04c      	beq.n	8006598 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006500:	2b00      	cmp	r3, #0
 8006502:	d007      	beq.n	8006514 <UART_WaitOnFlagUntilTimeout+0x30>
 8006504:	f7fb ffc2 	bl	800248c <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006510:	429a      	cmp	r2, r3
 8006512:	d241      	bcs.n	8006598 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330c      	adds	r3, #12
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	330c      	adds	r3, #12
 8006532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006534:	637a      	str	r2, [r7, #52]	; 0x34
 8006536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800653a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e5      	bne.n	8006514 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3314      	adds	r3, #20
 800654e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	613b      	str	r3, [r7, #16]
   return(result);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f023 0301 	bic.w	r3, r3, #1
 800655e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3314      	adds	r3, #20
 8006566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006568:	623a      	str	r2, [r7, #32]
 800656a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	69f9      	ldr	r1, [r7, #28]
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	61bb      	str	r3, [r7, #24]
   return(result);
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e5      	bne.n	8006548 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e00f      	b.n	80065b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4013      	ands	r3, r2
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	bf0c      	ite	eq
 80065a8:	2301      	moveq	r3, #1
 80065aa:	2300      	movne	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d09f      	beq.n	80064f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3740      	adds	r7, #64	; 0x40
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	88fa      	ldrh	r2, [r7, #6]
 80065d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	88fa      	ldrh	r2, [r7, #6]
 80065de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2222      	movs	r2, #34	; 0x22
 80065ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006604:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695a      	ldr	r2, [r3, #20]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f042 0220 	orr.w	r2, r2, #32
 8006624:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b095      	sub	sp, #84	; 0x54
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	330c      	adds	r3, #12
 800665a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800665c:	643a      	str	r2, [r7, #64]	; 0x40
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e5      	bne.n	800663c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3314      	adds	r3, #20
 8006676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	64bb      	str	r3, [r7, #72]	; 0x48
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3314      	adds	r3, #20
 800668e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006690:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e5      	bne.n	8006670 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d119      	bne.n	80066e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	330c      	adds	r3, #12
 80066b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f023 0310 	bic.w	r3, r3, #16
 80066c2:	647b      	str	r3, [r7, #68]	; 0x44
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	330c      	adds	r3, #12
 80066ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066cc:	61ba      	str	r2, [r7, #24]
 80066ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6979      	ldr	r1, [r7, #20]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	613b      	str	r3, [r7, #16]
   return(result);
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e5      	bne.n	80066ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066ee:	bf00      	nop
 80066f0:	3754      	adds	r7, #84	; 0x54
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7ff fecf 	bl	80064b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800671a:	bf00      	nop
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b21      	cmp	r3, #33	; 0x21
 8006734:	d13e      	bne.n	80067b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673e:	d114      	bne.n	800676a <UART_Transmit_IT+0x48>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d110      	bne.n	800676a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800675c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	1c9a      	adds	r2, r3, #2
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]
 8006768:	e008      	b.n	800677c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6211      	str	r1, [r2, #32]
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4619      	mov	r1, r3
 800678a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10f      	bne.n	80067b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800679e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e000      	b.n	80067b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
  }
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff fe5e 	bl	80064a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b08c      	sub	sp, #48	; 0x30
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b22      	cmp	r3, #34	; 0x22
 8006804:	f040 80ab 	bne.w	800695e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006810:	d117      	bne.n	8006842 <UART_Receive_IT+0x50>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d113      	bne.n	8006842 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006830:	b29a      	uxth	r2, r3
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	1c9a      	adds	r2, r3, #2
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	629a      	str	r2, [r3, #40]	; 0x28
 8006840:	e026      	b.n	8006890 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006848:	2300      	movs	r3, #0
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006854:	d007      	beq.n	8006866 <UART_Receive_IT+0x74>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <UART_Receive_IT+0x82>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	b2da      	uxtb	r2, r3
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	e008      	b.n	8006886 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006880:	b2da      	uxtb	r2, r3
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4619      	mov	r1, r3
 800689e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d15a      	bne.n	800695a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0220 	bic.w	r2, r2, #32
 80068b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d135      	bne.n	8006950 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	330c      	adds	r3, #12
 80068f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	613b      	str	r3, [r7, #16]
   return(result);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f023 0310 	bic.w	r3, r3, #16
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	623a      	str	r2, [r7, #32]
 800690c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	69f9      	ldr	r1, [r7, #28]
 8006910:	6a3a      	ldr	r2, [r7, #32]
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	61bb      	str	r3, [r7, #24]
   return(result);
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e5      	bne.n	80068ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b10      	cmp	r3, #16
 800692a:	d10a      	bne.n	8006942 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff fdbf 	bl	80064cc <HAL_UARTEx_RxEventCallback>
 800694e:	e002      	b.n	8006956 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7fb fb13 	bl	8001f7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	e002      	b.n	8006960 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	e000      	b.n	8006960 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800695e:	2302      	movs	r3, #2
  }
}
 8006960:	4618      	mov	r0, r3
 8006962:	3730      	adds	r7, #48	; 0x30
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800696c:	b0c0      	sub	sp, #256	; 0x100
 800696e:	af00      	add	r7, sp, #0
 8006970:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006984:	68d9      	ldr	r1, [r3, #12]
 8006986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	ea40 0301 	orr.w	r3, r0, r1
 8006990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	431a      	orrs	r2, r3
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069c0:	f021 010c 	bic.w	r1, r1, #12
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069ce:	430b      	orrs	r3, r1
 80069d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e2:	6999      	ldr	r1, [r3, #24]
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	ea40 0301 	orr.w	r3, r0, r1
 80069ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	4b8f      	ldr	r3, [pc, #572]	; (8006c34 <UART_SetConfig+0x2cc>)
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d005      	beq.n	8006a08 <UART_SetConfig+0xa0>
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b8d      	ldr	r3, [pc, #564]	; (8006c38 <UART_SetConfig+0x2d0>)
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d104      	bne.n	8006a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a08:	f7fd fbf8 	bl	80041fc <HAL_RCC_GetPCLK2Freq>
 8006a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a10:	e003      	b.n	8006a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a12:	f7fd fbdf 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 8006a16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a24:	f040 810c 	bne.w	8006c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	1891      	adds	r1, r2, r2
 8006a40:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a42:	415b      	adcs	r3, r3
 8006a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	eb12 0801 	adds.w	r8, r2, r1
 8006a50:	4629      	mov	r1, r5
 8006a52:	eb43 0901 	adc.w	r9, r3, r1
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a6a:	4690      	mov	r8, r2
 8006a6c:	4699      	mov	r9, r3
 8006a6e:	4623      	mov	r3, r4
 8006a70:	eb18 0303 	adds.w	r3, r8, r3
 8006a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a78:	462b      	mov	r3, r5
 8006a7a:	eb49 0303 	adc.w	r3, r9, r3
 8006a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a96:	460b      	mov	r3, r1
 8006a98:	18db      	adds	r3, r3, r3
 8006a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	eb42 0303 	adc.w	r3, r2, r3
 8006aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8006aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006aac:	f7f9 fb8c 	bl	80001c8 <__aeabi_uldivmod>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4b61      	ldr	r3, [pc, #388]	; (8006c3c <UART_SetConfig+0x2d4>)
 8006ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8006aba:	095b      	lsrs	r3, r3, #5
 8006abc:	011c      	lsls	r4, r3, #4
 8006abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	1891      	adds	r1, r2, r2
 8006ad6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ad8:	415b      	adcs	r3, r3
 8006ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b00:	4692      	mov	sl, r2
 8006b02:	469b      	mov	fp, r3
 8006b04:	4643      	mov	r3, r8
 8006b06:	eb1a 0303 	adds.w	r3, sl, r3
 8006b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	eb4b 0303 	adc.w	r3, fp, r3
 8006b14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	18db      	adds	r3, r3, r3
 8006b30:	643b      	str	r3, [r7, #64]	; 0x40
 8006b32:	4613      	mov	r3, r2
 8006b34:	eb42 0303 	adc.w	r3, r2, r3
 8006b38:	647b      	str	r3, [r7, #68]	; 0x44
 8006b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b42:	f7f9 fb41 	bl	80001c8 <__aeabi_uldivmod>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4b3b      	ldr	r3, [pc, #236]	; (8006c3c <UART_SetConfig+0x2d4>)
 8006b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	2264      	movs	r2, #100	; 0x64
 8006b56:	fb02 f303 	mul.w	r3, r2, r3
 8006b5a:	1acb      	subs	r3, r1, r3
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b62:	4b36      	ldr	r3, [pc, #216]	; (8006c3c <UART_SetConfig+0x2d4>)
 8006b64:	fba3 2302 	umull	r2, r3, r3, r2
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b70:	441c      	add	r4, r3
 8006b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b84:	4642      	mov	r2, r8
 8006b86:	464b      	mov	r3, r9
 8006b88:	1891      	adds	r1, r2, r2
 8006b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b8c:	415b      	adcs	r3, r3
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b94:	4641      	mov	r1, r8
 8006b96:	1851      	adds	r1, r2, r1
 8006b98:	6339      	str	r1, [r7, #48]	; 0x30
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	414b      	adcs	r3, r1
 8006b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bac:	4659      	mov	r1, fp
 8006bae:	00cb      	lsls	r3, r1, #3
 8006bb0:	4651      	mov	r1, sl
 8006bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bb6:	4651      	mov	r1, sl
 8006bb8:	00ca      	lsls	r2, r1, #3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	189b      	adds	r3, r3, r2
 8006bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bc8:	464b      	mov	r3, r9
 8006bca:	460a      	mov	r2, r1
 8006bcc:	eb42 0303 	adc.w	r3, r2, r3
 8006bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006be0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006be8:	460b      	mov	r3, r1
 8006bea:	18db      	adds	r3, r3, r3
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bee:	4613      	mov	r3, r2
 8006bf0:	eb42 0303 	adc.w	r3, r2, r3
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006bfe:	f7f9 fae3 	bl	80001c8 <__aeabi_uldivmod>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <UART_SetConfig+0x2d4>)
 8006c08:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0c:	095b      	lsrs	r3, r3, #5
 8006c0e:	2164      	movs	r1, #100	; 0x64
 8006c10:	fb01 f303 	mul.w	r3, r1, r3
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	3332      	adds	r3, #50	; 0x32
 8006c1a:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <UART_SetConfig+0x2d4>)
 8006c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	f003 0207 	and.w	r2, r3, #7
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4422      	add	r2, r4
 8006c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c30:	e106      	b.n	8006e40 <UART_SetConfig+0x4d8>
 8006c32:	bf00      	nop
 8006c34:	40011000 	.word	0x40011000
 8006c38:	40011400 	.word	0x40011400
 8006c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c52:	4642      	mov	r2, r8
 8006c54:	464b      	mov	r3, r9
 8006c56:	1891      	adds	r1, r2, r2
 8006c58:	6239      	str	r1, [r7, #32]
 8006c5a:	415b      	adcs	r3, r3
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c62:	4641      	mov	r1, r8
 8006c64:	1854      	adds	r4, r2, r1
 8006c66:	4649      	mov	r1, r9
 8006c68:	eb43 0501 	adc.w	r5, r3, r1
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	00eb      	lsls	r3, r5, #3
 8006c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c7a:	00e2      	lsls	r2, r4, #3
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	461d      	mov	r5, r3
 8006c80:	4643      	mov	r3, r8
 8006c82:	18e3      	adds	r3, r4, r3
 8006c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c88:	464b      	mov	r3, r9
 8006c8a:	eb45 0303 	adc.w	r3, r5, r3
 8006c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ca2:	f04f 0200 	mov.w	r2, #0
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cae:	4629      	mov	r1, r5
 8006cb0:	008b      	lsls	r3, r1, #2
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cb8:	4621      	mov	r1, r4
 8006cba:	008a      	lsls	r2, r1, #2
 8006cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006cc0:	f7f9 fa82 	bl	80001c8 <__aeabi_uldivmod>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4b60      	ldr	r3, [pc, #384]	; (8006e4c <UART_SetConfig+0x4e4>)
 8006cca:	fba3 2302 	umull	r2, r3, r3, r2
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	011c      	lsls	r4, r3, #4
 8006cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	1891      	adds	r1, r2, r2
 8006cea:	61b9      	str	r1, [r7, #24]
 8006cec:	415b      	adcs	r3, r3
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cf4:	4641      	mov	r1, r8
 8006cf6:	1851      	adds	r1, r2, r1
 8006cf8:	6139      	str	r1, [r7, #16]
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	414b      	adcs	r3, r1
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	00cb      	lsls	r3, r1, #3
 8006d10:	4651      	mov	r1, sl
 8006d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d16:	4651      	mov	r1, sl
 8006d18:	00ca      	lsls	r2, r1, #3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4642      	mov	r2, r8
 8006d22:	189b      	adds	r3, r3, r2
 8006d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d28:	464b      	mov	r3, r9
 8006d2a:	460a      	mov	r2, r1
 8006d2c:	eb42 0303 	adc.w	r3, r2, r3
 8006d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	008b      	lsls	r3, r1, #2
 8006d50:	4641      	mov	r1, r8
 8006d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d56:	4641      	mov	r1, r8
 8006d58:	008a      	lsls	r2, r1, #2
 8006d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d5e:	f7f9 fa33 	bl	80001c8 <__aeabi_uldivmod>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4611      	mov	r1, r2
 8006d68:	4b38      	ldr	r3, [pc, #224]	; (8006e4c <UART_SetConfig+0x4e4>)
 8006d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8006d6e:	095b      	lsrs	r3, r3, #5
 8006d70:	2264      	movs	r2, #100	; 0x64
 8006d72:	fb02 f303 	mul.w	r3, r2, r3
 8006d76:	1acb      	subs	r3, r1, r3
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	3332      	adds	r3, #50	; 0x32
 8006d7c:	4a33      	ldr	r2, [pc, #204]	; (8006e4c <UART_SetConfig+0x4e4>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d88:	441c      	add	r4, r3
 8006d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d8e:	2200      	movs	r2, #0
 8006d90:	673b      	str	r3, [r7, #112]	; 0x70
 8006d92:	677a      	str	r2, [r7, #116]	; 0x74
 8006d94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d98:	4642      	mov	r2, r8
 8006d9a:	464b      	mov	r3, r9
 8006d9c:	1891      	adds	r1, r2, r2
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	415b      	adcs	r3, r3
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006da8:	4641      	mov	r1, r8
 8006daa:	1851      	adds	r1, r2, r1
 8006dac:	6039      	str	r1, [r7, #0]
 8006dae:	4649      	mov	r1, r9
 8006db0:	414b      	adcs	r3, r1
 8006db2:	607b      	str	r3, [r7, #4]
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	f04f 0300 	mov.w	r3, #0
 8006dbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dc0:	4659      	mov	r1, fp
 8006dc2:	00cb      	lsls	r3, r1, #3
 8006dc4:	4651      	mov	r1, sl
 8006dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dca:	4651      	mov	r1, sl
 8006dcc:	00ca      	lsls	r2, r1, #3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	4642      	mov	r2, r8
 8006dd6:	189b      	adds	r3, r3, r2
 8006dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dda:	464b      	mov	r3, r9
 8006ddc:	460a      	mov	r2, r1
 8006dde:	eb42 0303 	adc.w	r3, r2, r3
 8006de2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	663b      	str	r3, [r7, #96]	; 0x60
 8006dee:	667a      	str	r2, [r7, #100]	; 0x64
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	008b      	lsls	r3, r1, #2
 8006e00:	4641      	mov	r1, r8
 8006e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e06:	4641      	mov	r1, r8
 8006e08:	008a      	lsls	r2, r1, #2
 8006e0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e0e:	f7f9 f9db 	bl	80001c8 <__aeabi_uldivmod>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <UART_SetConfig+0x4e4>)
 8006e18:	fba3 1302 	umull	r1, r3, r3, r2
 8006e1c:	095b      	lsrs	r3, r3, #5
 8006e1e:	2164      	movs	r1, #100	; 0x64
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	3332      	adds	r3, #50	; 0x32
 8006e2a:	4a08      	ldr	r2, [pc, #32]	; (8006e4c <UART_SetConfig+0x4e4>)
 8006e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	f003 020f 	and.w	r2, r3, #15
 8006e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4422      	add	r2, r4
 8006e3e:	609a      	str	r2, [r3, #8]
}
 8006e40:	bf00      	nop
 8006e42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e46:	46bd      	mov	sp, r7
 8006e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4c:	51eb851f 	.word	0x51eb851f

08006e50 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <FSMC_NORSRAM_Init+0xa0>)
 8006e6e:	4013      	ands	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e7a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006e80:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006e86:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006e8c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006e92:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006e98:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006e9e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006ea4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006eaa:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006eb0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006eb6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006ebc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d103      	bne.n	8006ed4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ed2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68f9      	ldr	r1, [r7, #12]
 8006edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	fff00080 	.word	0xfff00080

08006ef4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006f16:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f22:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006f2a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006f32:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f3c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	3b02      	subs	r3, #2
 8006f44:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f46:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6979      	ldr	r1, [r7, #20]
 8006f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
	...

08006f70 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f88:	d122      	bne.n	8006fd0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f92:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4b15      	ldr	r3, [pc, #84]	; (8006fec <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006fa6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006fae:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006fb6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006fbc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6979      	ldr	r1, [r7, #20]
 8006fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006fce:	e005      	b.n	8006fdc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	cff00000 	.word	0xcff00000

08006ff0 <memset>:
 8006ff0:	4402      	add	r2, r0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d100      	bne.n	8006ffa <memset+0xa>
 8006ff8:	4770      	bx	lr
 8006ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8006ffe:	e7f9      	b.n	8006ff4 <memset+0x4>

08007000 <__libc_init_array>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	4d0d      	ldr	r5, [pc, #52]	; (8007038 <__libc_init_array+0x38>)
 8007004:	4c0d      	ldr	r4, [pc, #52]	; (800703c <__libc_init_array+0x3c>)
 8007006:	1b64      	subs	r4, r4, r5
 8007008:	10a4      	asrs	r4, r4, #2
 800700a:	2600      	movs	r6, #0
 800700c:	42a6      	cmp	r6, r4
 800700e:	d109      	bne.n	8007024 <__libc_init_array+0x24>
 8007010:	4d0b      	ldr	r5, [pc, #44]	; (8007040 <__libc_init_array+0x40>)
 8007012:	4c0c      	ldr	r4, [pc, #48]	; (8007044 <__libc_init_array+0x44>)
 8007014:	f000 f818 	bl	8007048 <_init>
 8007018:	1b64      	subs	r4, r4, r5
 800701a:	10a4      	asrs	r4, r4, #2
 800701c:	2600      	movs	r6, #0
 800701e:	42a6      	cmp	r6, r4
 8007020:	d105      	bne.n	800702e <__libc_init_array+0x2e>
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	f855 3b04 	ldr.w	r3, [r5], #4
 8007028:	4798      	blx	r3
 800702a:	3601      	adds	r6, #1
 800702c:	e7ee      	b.n	800700c <__libc_init_array+0xc>
 800702e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007032:	4798      	blx	r3
 8007034:	3601      	adds	r6, #1
 8007036:	e7f2      	b.n	800701e <__libc_init_array+0x1e>
 8007038:	0800a020 	.word	0x0800a020
 800703c:	0800a020 	.word	0x0800a020
 8007040:	0800a020 	.word	0x0800a020
 8007044:	0800a024 	.word	0x0800a024

08007048 <_init>:
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704a:	bf00      	nop
 800704c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800704e:	bc08      	pop	{r3}
 8007050:	469e      	mov	lr, r3
 8007052:	4770      	bx	lr

08007054 <_fini>:
 8007054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007056:	bf00      	nop
 8007058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705a:	bc08      	pop	{r3}
 800705c:	469e      	mov	lr, r3
 800705e:	4770      	bx	lr
